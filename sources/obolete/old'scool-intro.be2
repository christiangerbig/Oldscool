; #################################
; # Programm: old'scool-intro.asm #
; # Autor:    Christian Gerbig    #
; # Datum:    10.07.2023          #
; # Version:  1.0 beta            #
; # CPU:      68020+              #
; # FASTMEM:  -                   #
; # Chipset:  AGA                 #
; # OS:       3.0+                #
; #################################

; Version 1.0 beta

; Ausführungszeit 68020: n Rasterzeilen

  SECTION code_and_variables,CODE

  MC68040


; ** Library-Includes V.3.x nachladen **
; --------------------------------------
  INCDIR "Daten:include3.5/"

  INCLUDE "exec/exec.i"
  INCLUDE "exec/exec_lib.i"

  INCLUDE "dos/dos.i"
  INCLUDE "dos/dos_lib.i"
  INCLUDE "dos/dosextens.i"

  INCLUDE "graphics/gfxbase.i"
  INCLUDE "graphics/graphics_lib.i"
  INCLUDE "graphics/videocontrol.i"

  INCLUDE "intuition/intuition.i"
  INCLUDE "intuition/intuition_lib.i"

  INCLUDE "libraries/any_lib.i"

  INCLUDE "resources/cia_lib.i"

  INCLUDE "hardware/adkbits.i"
  INCLUDE "hardware/blit.i"
  INCLUDE "hardware/cia.i"
  INCLUDE "hardware/custom.i"
  INCLUDE "hardware/dmabits.i"
  INCLUDE "hardware/intbits.i"

  INCDIR "Daten:Asm-Sources.AGA/normsource-includes/"


; ** Konstanten **
; ----------------

  INCLUDE "equals.i"

requires_68030 EQU FALSE
requires_68040 EQU FALSE
requires_68060 EQU FALSE
requires_fast_memory EQU FALSE
requires_multiscan_monitor EQU FALSE

workbench_start_enabled EQU FALSE
workbench_fade_enabled        EQU FALSE
text_output_enabled EQU FALSE

pt_v3.0b
pt_ciatiming_enabled EQU TRUE
pt_usedfx EQU %1111010001011001
pt_usedefx EQU %0000100000000000
pt_finetune_enabled EQU FALSE
  IFD pt_v3.0b
pt_metronome_enabled EQU FALSE
  ENDC
pt_track_volumes_enabled EQU FALSE
pt_track_periods_enabled EQU FALSE
pt_music_fader_enabled EQU TRUE
pt_split_module_enabled EQU TRUE

open_border_enabled EQU -1;TRUE
crz_table_length_256 EQU FALSE

  IFNE open_border_enabled 
dma_bits EQU DMAF_BLITTER+DMAF_SPRITE+DMAF_COPPER+DMAF_RASTER+DMAF_MASTER+DMAF_SETCLR
  ELSE
dma_bits EQU DMAF_BLITTER+DMAF_SPRITE+DMAF_COPPER+DMAF_MASTER+DMAF_SETCLR
  ENDC

  IFEQ pt_ciatiming_enabled
intena_bits EQU INTF_EXTER+INTF_INTEN+INTF_SETCLR
  ELSE                         
intena_bits EQU INTF_VERTB+INTF_EXTER+INTF_INTEN+INTF_SETCLR
  ENDC

ciaa_icr_bits EQU CIAICRF_SETCLR
  IFEQ pt_ciatiming_enabled
ciab_icr_bits EQU CIAICRF_TA+CIAICRF_TB+CIAICRF_SETCLR
  ELSE
ciab_icr_bits EQU CIAICRF_TB+CIAICRF_SETCLR
  ENDC

copcon_bits EQU TRUE

pf1_x_size1 EQU 0
pf1_y_size1 EQU 0
pf1_depth1 EQU 0
pf1_x_size2 EQU 0
pf1_y_size2 EQU 0
pf1_depth2 EQU 0
  IFNE open_border_enabled 
pf1_x_size3 EQU 32
pf1_y_size3 EQU 1
pf1_depth3 EQU 1
  ELSE
pf1_x_size3 EQU 0
pf1_y_size3 EQU 0
pf1_depth3 EQU 0
  ENDC
pf1_colors_number EQU 0 ;128+16

pf2_x_size1 EQU 0
pf2_y_size1 EQU 0
pf2_depth1 EQU 0
pf2_x_size2 EQU 0
pf2_y_size2 EQU 0
pf2_depth2 EQU 0
pf2_x_size3 EQU 0
pf2_y_size3 EQU 0
pf2_depth3 EQU 0
pf2_colors_number EQU 0
pf_colors_number EQU pf1_colors_number+pf2_colors_number
pf_depth EQU pf1_depth3+pf2_depth3

extra_pf_number EQU 0

spr_number EQU 8
spr_x_size1 EQU 0
spr_x_size2 EQU 64
spr_y_size2 EQU 56
spr_depth EQU 2
spr_colors_number EQU 0 ;16
spr_odd_color_table_select  EQU 8
spr_even_color_table_select EQU 8
spr_used_number EQU 6

  IFD pt_v2.3a
audio_memory_size EQU 0
  ENDC
  IFD pt_v3.0b
audio_memory_size EQU 2
  ENDC

disk_memory_size EQU 0

extra_memory_sizeEQU 0

chip_memory_size EQU 0

OS_VERSION_AGA EQU 39

  IFEQ pt_ciatiming_enabled
ciab_cra_bits EQU CIACRBF_LOAD
  ENDC
ciab_crb_bits EQU CIACRBF_LOAD+CIACRBF_RUNMODE ;Oneshot mode
ciaa_ta_time EQU 0
ciaa_tb_time EQU 0
  IFEQ pt_ciatiming_enabled
ciab_ta_time EQU 14187 ;= 0.709379 MHz * [20000 µs = 50 Hz duration for one frame on a PAL machine]
;ciab_ta_time EQU 14318 ;= 0.715909 MHz * [20000 µs = 50 Hz duration for one frame on a NTSC machine]
  ELSE
ciab_ta_time EQU 0
  ENDC
ciab_tb_time EQU 362 ;= 0.709379 MHz * [511.43 µs = Lowest note period C1 with Tuning=-8 * 2 / PAL clock constant = 907*2/3546895 ticks per second]
                      ;= 0.715909 MHz * [506.76 µs = Lowest note period C1 with Tuning=-8 * 2 / NTSC clock constant = 907*2/3579545 ticks per second]
ciaa_ta_continuous_enabled EQU FALSE
ciaa_tb_continuous_enabled EQU FALSE
  IFEQ pt_ciatiming_enabled
ciab_ta_continuous_enabled EQU TRUE
  ELSE
ciab_ta_continuous_enabled EQU FALSE
  ENDC
ciab_tb_continuous_enabled EQU FALSE

beam_position EQU $136

  IFNE open_border_enabled 
pixel_per_line EQU 32
  ENDC
visible_pixels_number EQU 320
visible_lines_number EQU 256
MINROW EQU VSTART_256_LINES

  IFNE open_border_enabled 
pf_pixel_per_datafetch EQU 16 ;1x
ddfstrt_bits EQU DDFSTART_320_pixel
ddfstop_bitsEQU DDFSTOP_STANDARD_MIN
  ENDC
spr_pixel_per_datafetch EQU 64 ;4x

display_window_hstart EQU HSTART_320_PIXEL
display_window_vstart EQU MINROW
diwstrt_bits EQU ((display_window_VSTART&$ff)*DIWSTRTF_V0)+(display_window_HSTART&$ff)
display_window_hstop EQU HSTOP_320_pixel
display_window_vstop EQU VSTOP_256_lines
diwstop_bits EQU ((display_window_VSTOP&$ff)*DIWSTOPF_V0)+(display_window_HSTOP&$ff)

  IFNE open_border_enabled 
pf1_plane_width EQU pf1_x_size3/8
data_fetch_width EQU pixel_per_line/8
pf1_plane_moduli EQU -(pf1_plane_width-(pf1_plane_width-data_fetch_width))
  ENDC

bplcon0_bits EQU BPLCON0F_ECSENA+((pf_depth>>3)*BPLCON0F_BPU3)+(BPLCON0F_COLOR)+((pf_depth&$07)*BPLCON0F_BPU0) 
bplcon1_bits EQU TRUE
bplcon2_bits EQU TRUE
bplcon3_bits1 EQU BPLCON3F_SPRES0
bplcon3_bits2 EQU bplcon3_bits1+BPLCON3F_LOCT
bplcon4_bits EQU (BPLCON4F_OSPRM4*spr_odd_color_table_select)+(BPLCON4F_ESPRM4*spr_even_color_table_select)
diwhigh_bitsEQU DIWHIGHF_HSTOP1+(((display_window_HSTOP&$100)>>8)*DIWHIGHF_HSTOP8)+(((display_window_VSTOP&$700)>>8)*DIWHIGHF_VSTOP8)+DIWHIGHF_hstart1+(((display_window_HSTART&$100)>>8)*DIWHIGHF_HSTART8)+((display_window_VSTART&$700)>>8)
fmode_bits EQU FMODEF_SPR32+FMODEF_SPAGEM
color00_bits EQU $090911

crz_disp_y_scale_factor EQU 4

cl2_display_x_size EQU visible_pixels_number+8
cl2_display_width  EQU cl2_display_x_size/8
cl2_display_y_size EQU visible_lines_number/crz_disp_y_scale_factor
  IFNE open_border_enabled
cl1_hstart1        EQU display_window_HSTART-(5*CMOVE_SLOT_PERIOD)
  ELSE
cl1_hstart1        EQU display_window_HSTART-(6*CMOVE_SLOT_PERIOD)
  ENDC
cl1_vstart1        EQU MINROW
cl1_hstart2        EQU $00
cl1_vstart2        EQU beam_position&$ff

; **** PT-Replay ****
  IFD pt_v2.3a
    INCLUDE "music-tracker/pt2-equals.i"
  ENDC
  IFD pt_v3.0b
    INCLUDE "music-tracker/pt3-equals.i"
  ENDC

  IFEQ pt_music_fader_enabled
pt_fade_out_delay EQU 2 ;Ticks
  ENDC

sine_table_length EQU 512

; **** Chunky-Rotation-Zoomer ****
crz_image_x_size EQU 256
crz_image_plane_width EQU crz_image_x_size/8
crz_image_y_size EQU 256
crz_image_depth EQU 7

crz_Ax EQU -40;-32;-((cl2_display_width-1)/2)
crz_Ay EQU -32;-(cl2_display_y_size/2)
crz_Bx EQU 40;32;(cl2_display_width-1)/2
crz_By EQU -32;-32;-(cl2_display_y_size/2)

crz_z_rotation_x_centre EQU crz_image_x_size/2
crz_z_rotation_y_centre EQU crz_image_y_size/2
crz_z_rotation_angle_speed EQU 3

crz_d EQU 250 ;1000
crz_zoom_radius EQU 1024
crz_zoom_centre EQU 1024+crz_d
crz_zoom_angle_speed EQU 2

; **** Wave-Scrolltext ****
wst_used_sprites_number EQU 6

wst_image_x_size EQU 640
wst_image_plane_width EQU wst_image_x_size/8
wst_image_depth EQU 2

wst_origin_character_x_size EQU 64
wst_origin_character_y_size EQU 56
wst_origin_character_depth EQU wst_image_depth

wst_text_character_x_size EQU wst_origin_character_x_size
wst_text_character_width EQU wst_text_character_x_size/8
wst_text_character_y_size EQU wst_origin_character_y_size
wst_text_character_depth EQU wst_image_depth

wst_horiz_scroll_window_x_size EQU visible_pixels_number+wst_text_character_x_size
wst_horiz_scroll_window_width EQU wst_horiz_scroll_window_x_size/8
wst_horiz_scroll_window_y_size EQU wst_text_character_y_size
wst_horiz_scroll_window_depth EQU wst_text_character_depth
wst_horiz_scroll_speed EQU 10

wst_text_character_x_restart EQU wst_horiz_scroll_window_x_size*4 ;*4 da superhires Pixel
wst_text_characters_number EQU wst_horiz_scroll_window_x_size/wst_text_character_x_size

wst_y_radius EQU (visible_lines_number-wst_text_character_y_size)/2
wst_y_centre EQU ((visible_lines_number-wst_text_character_y_size)/2)+display_window_VSTART
wst_y_angle_speed EQU 5
wst_y_angle_step EQU sine_table_length/wst_text_characters_number



; ** CIA-ICR-Register-Bits-Namen **
; ---------------------------------
; CIAICR_TA
; CIAICR_TB
; CIAICR_ALRM
; CIAICR_SP
; CIAICR_FLG
; CIAICR_IR
; CIAICR_SETCLR


; ** DMACON-Register-Bits-Namen **
; --------------------------------
; DMA_SETCLR
; DMA_AUDIO (alle 4 Audio-Kanäle)
; DMA_AUD0
; DMA_AUD1
; DMA_AUD2
; DMA_AUD3
; DMA_DISK
; DMA_SPRITE
; DMA_BLITTER
; DMA_COPPER
; DMA_RASTER
; DMA_MASTER
; DMA_BLITHOG
; DMA_ALL (alle DMA-Kanäle)


; ** INTENA-Register-Bits-Namen **
; --------------------------------
; INT_SETCLR
; INT_INTEN
; INT_EXTER
; INT_DSKSYNC
; INT_RBF
; INT_AUD3
; INT_AUD2
; INT_AUD1
; INT_AUD0
; INT_BLIT
; INT_VERTB
; INT_COPER
; INT_PORTS
; INT_SOFTINT
; INT_DSKBLK
; INT_TBE


; ** Struktur, die alle Exception-Vektoren-Offsets enthält **
; -----------------------------------------------------------

  INCLUDE "except-vectors-offsets.i"


; ** Struktur, die alle Eigenschaften des Extra-Playfields enthält **
; -------------------------------------------------------------------

  INCLUDE "extra-pf-attributes-structure.i"


; ** Struktur, die alle Eigenschaften der Sprites enthält **
; ----------------------------------------------------------

  INCLUDE "sprite-attributes-structure.i"


; ** Struktur, die alle Registeroffsets der ersten Copperliste enthält **
; -----------------------------------------------------------------------
  RSRESET

cl1_subextension1      RS.B 0
cl1_subext1_WAIT       RS.L 1
cl1_subext1_COP1LCH    RS.L 1
cl1_subext1_COP1LCL    RS.L 1
cl1_subext1_COPJMP2    RS.L 1
cl1_subextension1_size RS.B 0

  RSRESET

cl1_extension1               RS.B 0
cl1_ext1_COP2LCH             RS.L 1
cl1_ext1_COP2LCL             RS.L 1
cl1_ext1_subextension1_entry RS.B cl1_subextension1_size*crz_disp_y_scale_factor
cl1_extension1_size          RS.B 0

  RSRESET

cl1_begin            RS.B 0

  INCLUDE "copperlist1-offsets.i"

cl1_extension1_entry RS.B cl1_extension1_size*cl2_display_y_size
;cl1_WAIT1            RS.L 1
cl1_WAIT2            RS.L 1
cl1_INTENA           RS.L 1

cl1_end              RS.L 1

copperlist1_SIZE     RS.B 0


; ** Struktur, die alle Registeroffsets der zweiten Copperliste enthält **
; ------------------------------------------------------------------------

  RSRESET

cl2_extension1      RS.B 0

  IFEQ open_border_enabled 
cl2_ext1_BPL1DAT    RS.L 1
  ENDC
cl2_ext1_BPLCON4_1  RS.L 1
cl2_ext1_BPLCON4_2  RS.L 1
cl2_ext1_BPLCON4_3  RS.L 1
cl2_ext1_BPLCON4_4  RS.L 1
cl2_ext1_BPLCON4_5  RS.L 1
cl2_ext1_BPLCON4_6  RS.L 1
cl2_ext1_BPLCON4_7  RS.L 1
cl2_ext1_BPLCON4_8  RS.L 1
cl2_ext1_BPLCON4_9  RS.L 1
cl2_ext1_BPLCON4_10 RS.L 1
cl2_ext1_BPLCON4_11 RS.L 1
cl2_ext1_BPLCON4_12 RS.L 1
cl2_ext1_BPLCON4_13 RS.L 1
cl2_ext1_BPLCON4_14 RS.L 1
cl2_ext1_BPLCON4_15 RS.L 1
cl2_ext1_BPLCON4_16 RS.L 1
cl2_ext1_BPLCON4_17 RS.L 1
cl2_ext1_BPLCON4_18 RS.L 1
cl2_ext1_BPLCON4_19 RS.L 1
cl2_ext1_BPLCON4_20 RS.L 1
cl2_ext1_BPLCON4_21 RS.L 1
cl2_ext1_BPLCON4_22 RS.L 1
cl2_ext1_BPLCON4_23 RS.L 1
cl2_ext1_BPLCON4_24 RS.L 1
cl2_ext1_BPLCON4_25 RS.L 1
cl2_ext1_BPLCON4_26 RS.L 1
cl2_ext1_BPLCON4_27 RS.L 1
cl2_ext1_BPLCON4_28 RS.L 1
cl2_ext1_BPLCON4_29 RS.L 1
cl2_ext1_BPLCON4_30 RS.L 1
cl2_ext1_BPLCON4_31 RS.L 1
cl2_ext1_BPLCON4_32 RS.L 1
cl2_ext1_BPLCON4_33 RS.L 1
cl2_ext1_BPLCON4_34 RS.L 1
cl2_ext1_BPLCON4_35 RS.L 1
cl2_ext1_BPLCON4_36 RS.L 1
cl2_ext1_BPLCON4_37 RS.L 1
cl2_ext1_BPLCON4_38 RS.L 1
cl2_ext1_BPLCON4_39 RS.L 1
cl2_ext1_BPLCON4_40 RS.L 1
cl2_ext1_BPLCON4_41 RS.L 1
cl2_ext1_COPJMP1    RS.L 1

cl2_extension1_size RS.B 0

  RSRESET

cl2_begin            RS.B 0

cl2_extension1_entry RS.B cl2_extension1_size*cl2_display_y_size

copperlist2_SIZE     RS.B 0


; ** Konstanten für die größe der Copperlisten **
; -----------------------------------------------
cl1_size1 EQU 0
cl1_size2 EQU copperlist1_SIZE
cl1_size3 EQU copperlist1_SIZE
cl2_size1 EQU 0
cl2_size2 EQU copperlist2_SIZE
cl2_size3 EQU copperlist2_SIZE


; ** Sprite0-Zusatzstruktur **
; ----------------------------
  RSRESET

spr0_extension1      RS.B 0

spr0_ext1_header     RS.L 1*(spr_pixel_per_datafetch/16)
spr0_ext1_planedata  RS.L spr_y_size2*(spr_pixel_per_datafetch/16)

spr0_extension1_size RS.B 0

; ** Sprite0-Hauptstruktur **
; ---------------------------
  RSRESET

spr0_begin            RS.B 0

spr0_extension1_entry RS.B spr0_extension1_size

spr0_end              RS.L 1*(spr_pixel_per_datafetch/16)

sprite0_SIZE          RS.B 0

; ** Sprite1-Zusatzstruktur **
; ----------------------------
  RSRESET

spr1_extension1      RS.B 0

spr1_ext1_header     RS.L 1*(spr_pixel_per_datafetch/16)
spr1_ext1_planedata  RS.L spr_y_size2*(spr_pixel_per_datafetch/16)

spr1_extension1_size RS.B 0

; ** Sprite1-Hauptstruktur **
; ---------------------------
  RSRESET

spr1_begin            RS.B 0

spr1_extension1_entry RS.B spr1_extension1_size

spr1_end              RS.L 1*(spr_pixel_per_datafetch/16)

sprite1_SIZE          RS.B 0

; ** Sprite2-Zusatzstruktur **
; ----------------------------
  RSRESET

spr2_extension1      RS.B 0

spr2_ext1_header     RS.L 1*(spr_pixel_per_datafetch/16)
spr2_ext1_planedata  RS.L spr_y_size2*(spr_pixel_per_datafetch/16)

spr2_extension1_size RS.B 0

; ** Sprite2-Hauptstruktur **
; ---------------------------
  RSRESET

spr2_begin            RS.B 0

spr2_extension1_entry RS.B spr2_extension1_size

spr2_end              RS.L 1*(spr_pixel_per_datafetch/16)

sprite2_SIZE          RS.B 0

; ** Sprite3-Zusatzstruktur **
; ----------------------------
  RSRESET

spr3_extension1      RS.B 0

spr3_ext1_header     RS.L 1*(spr_pixel_per_datafetch/16)
spr3_ext1_planedata  RS.L spr_y_size2*(spr_pixel_per_datafetch/16)

spr3_extension1_size RS.B 0

; ** Sprite3-Hauptstruktur **
; ---------------------------
  RSRESET

spr3_begin            RS.B 0

spr3_extension1_entry RS.B spr3_extension1_size

spr3_end              RS.L 1*(spr_pixel_per_datafetch/16)

sprite3_SIZE          RS.B 0

; ** Sprite4-Zusatzstruktur **
; ----------------------------
  RSRESET

spr4_extension1      RS.B 0

spr4_ext1_header     RS.L 1*(spr_pixel_per_datafetch/16)
spr4_ext1_planedata  RS.L spr_y_size2*(spr_pixel_per_datafetch/16)

spr4_extension1_size RS.B 0

; ** Sprite4-Hauptstruktur **
; ---------------------------
  RSRESET

spr4_begin            RS.B 0

spr4_extension1_entry RS.B spr4_extension1_size

spr4_end              RS.L 1*(spr_pixel_per_datafetch/16)

sprite4_SIZE          RS.B 0

; ** Sprite5-Zusatzstruktur **
; ----------------------------
  RSRESET

spr5_extension1      RS.B 0

spr5_ext1_header     RS.L 1*(spr_pixel_per_datafetch/16)
spr5_ext1_planedata  RS.L spr_y_size2*(spr_pixel_per_datafetch/16)

spr5_extension1_size RS.B 0

; ** Sprite5-Hauptstruktur **
; ---------------------------
  RSRESET

spr5_begin            RS.B 0

spr5_extension1_entry RS.B spr5_extension1_size

spr5_end              RS.L 1*(spr_pixel_per_datafetch/16)

sprite5_SIZE          RS.B 0

; ** Sprite6-Hauptstruktur **
; ---------------------------
  RSRESET

spr6_begin   RS.B 0

spr6_end     RS.L 1*(spr_pixel_per_datafetch/16)

sprite6_SIZE RS.B 0

; ** Sprite7-Hauptstruktur **
; ---------------------------
  RSRESET

spr7_begin   RS.B 0

spr7_end     RS.L 1*(spr_pixel_per_datafetch/16)

sprite7_SIZE RS.B 0


; ** Konstanten für die Größe der Spritestrukturen **
; ---------------------------------------------------
spr0_x_size1 EQU spr_x_size1
spr0_y_size1 EQU 0
spr1_x_size1 EQU spr_x_size1
spr1_y_size1 EQU 0
spr2_x_size1 EQU spr_x_size1
spr2_y_size1 EQU 0
spr3_x_size1 EQU spr_x_size1
spr3_y_size1 EQU 0
spr4_x_size1 EQU spr_x_size1
spr4_y_size1 EQU 0
spr5_x_size1 EQU spr_x_size1
spr5_y_size1 EQU 0
spr6_x_size1 EQU spr_x_size1
spr6_y_size1 EQU 0
spr7_x_size1 EQU spr_x_size1
spr7_y_size1 EQU 0

spr0_x_size2 EQU spr_x_size2
spr0_y_size2 EQU sprite0_SIZE/(spr_pixel_per_datafetch/4)
spr1_x_size2 EQU spr_x_size2
spr1_y_size2 EQU sprite1_SIZE/(spr_pixel_per_datafetch/4)
spr2_x_size2 EQU spr_x_size2
spr2_y_size2 EQU sprite2_SIZE/(spr_pixel_per_datafetch/4)
spr3_x_size2 EQU spr_x_size2
spr3_y_size2 EQU sprite3_SIZE/(spr_pixel_per_datafetch/4)
spr4_x_size2 EQU spr_x_size2
spr4_y_size2 EQU sprite4_SIZE/(spr_pixel_per_datafetch/4)
spr5_x_size2 EQU spr_x_size2
spr5_y_size2 EQU sprite5_SIZE/(spr_pixel_per_datafetch/4)
spr6_x_size2 EQU spr_x_size2
spr6_y_size2 EQU sprite6_SIZE/(spr_pixel_per_datafetch/4)
spr7_x_size2 EQU spr_x_size2
spr7_y_size2 EQU sprite7_SIZE/(spr_pixel_per_datafetch/4)


; ** Struktur, die alle Variablenoffsets enthält **
; -------------------------------------------------

  INCLUDE "variables-offsets.i"

; ** Relative offsets for variables **
; ------------------------------------

save_a7 RS.L 1

; **** PT-Replay ****
  IFD pt_v2.3a
    INCLUDE "music-tracker/pt2-variables-offsets.i"
  ENDC
  IFD pt_v3.0b
    INCLUDE "music-tracker/pt3-variables-offsets.i"
  ENDC

; **** Chunky-Raotation-Zoomer ****
crz_z_rotation_angle RS.W 1
crz_zoom_angle       RS.W 1

; **** Wave-Scrolltext ****
wst_image            RS.L 1
wst_text_table_start RS.W 1
wst_y_angle          RS.W 1

variables_SIZE RS.B 0


; **** PT-Replay ****
; ** PT-Song-Structure **
; -----------------------
  INCLUDE "music-tracker/pt-song-structure.i"

; ** Temporary channel structure **
; ---------------------------------
  INCLUDE "music-tracker/pt-temp-channel-structure.i"


; ## Makrobefehle ##
; ------------------

  INCLUDE "macros.i"


  INCLUDE "sys-wrapper.i"

; ** Eigene Variablen initialisieren **
; -------------------------------------
  CNOP 0,4
init_own_variables

; **** PT-Replay ****
  IFD pt_v2.3a
    PT2_INIT_VARIABLES
  ENDC
  IFD pt_v3.0b
    PT3_INIT_VARIABLES
  ENDC

; **** Chunky-Rotation-Zoomer ****
  moveq   #0,d0
  move.w  d0,crz_z_rotation_angle(a3)
  move.w  #(sine_table_length/4)*3,crz_zoom_angle(a3)

; **** Wave-Scrolltext ****
  lea     wst_image_data,a0
  move.l  a0,wst_image(a3)
  move.w  d0,wst_text_table_start(a3)
  move.w  d0,wst_y_angle(a3)
  rts

; ** Alle Initialisierungsroutinen ausführen **
; ---------------------------------------------
  CNOP 0,4
init_all
  bsr.s   pt_DetectSysFrequ
  bsr.s   init_CIA_timers
  bsr     init_sprites
  bsr     init_color_registers
  bsr     pt_InitRegisters
  bsr     pt_InitAudTempStrucs
  bsr     pt_ExamineSongStruc
  IFEQ pt_finetune_enabled
    bsr     pt_InitFtuPeriodTableStarts
  ENDC
  bsr     crz_convert_image_data
  bsr     wst_init_characters_offsets
  bsr     wst_init_characters_x_positions
  bsr     init_first_copperlist
  bsr     copy_first_copperlist
  bsr     cl1_set_branches_pointers
  bsr     init_second_copperlist
  bra     copy_second_copperlist

; **** PT-Replay ****
; ** Detect system frequency NTSC/PAL **
; --------------------------------------
  PT_DETECT_SYS_FREQUENCY

; ** CIA-Timer initialisieren **
; ------------------------------
  CNOP 0,4
init_CIA_timers
  PT_INIT_TIMERS
  rts

; ** Sprites initialisieren **
; ----------------------------
  CNOP 0,4
init_sprites

; ** Tabelle mit Zeigern auf Sprites initialisieren **
; ----------------------------------------------------
  COP_INIT_SPRITE_POINTERS_TABLE

; ** Farbregister initialisieren **
; ---------------------------------
  CNOP 0,4
init_color_registers
  CPU_SELECT_COLOR_HIGH_BANK 0
  CPU_INIT_COLOR_HIGH COLOR00,32,pf1_color_table
  CPU_SELECT_COLOR_HIGH_BANK 1
  CPU_INIT_COLOR_HIGH COLOR00,32
  CPU_SELECT_COLOR_HIGH_BANK 2
  CPU_INIT_COLOR_HIGH COLOR00,32
  CPU_SELECT_COLOR_HIGH_BANK 3
  CPU_INIT_COLOR_HIGH COLOR00,32
  CPU_SELECT_COLOR_HIGH_BANK 4
  CPU_INIT_COLOR_HIGH COLOR00,16,spr_color_table

  CPU_SELECT_COLOR_LOW_BANK 0
  CPU_INIT_COLOR_LOW COLOR00,32,pf1_color_table
  CPU_SELECT_COLOR_LOW_BANK 1
  CPU_INIT_COLOR_LOW COLOR00,32
  CPU_SELECT_COLOR_LOW_BANK 2
  CPU_INIT_COLOR_LOW COLOR00,32
  CPU_SELECT_COLOR_LOW_BANK 3
  CPU_INIT_COLOR_LOW COLOR00,32
  CPU_SELECT_COLOR_LOW_BANK 4
  CPU_INIT_COLOR_LOW COLOR00,16,spr_color_table
  rts

; **** PT-Replay ****
; ** Audioregister initialisieren **
; ----------------------------------
   PT_INIT_REGISTERS

; ** Temporäre Audio-Kanal-Struktur initialisieren **
; ---------------------------------------------------
   PT_INIT_AUDIO_TEMP_STRUCTURES

; ** Höchstes Pattern ermitteln und Tabelle mit Zeigern auf Samples initialisieren **
; -----------------------------------------------------------------------------------
   PT_EXAMINE_SONG_STRUCTURE

  IFEQ pt_finetune_enabled
; ** FineTuning-Offset-Tabelle initialisieren **
; ----------------------------------------------
    PT_INIT_FINETUNING_PERIOD_TABLE_STARTS
  ENDC

; **** Chunky-Rotation-Zoomer ****
; ** Playfielddaten in Switchwerte umwandeln **
; ----------------------------------------
  CONVERT_IMAGE_TO_BPLCON4_CHUNKY crz

; **** Wave-Scrolltext ****
; ** Offsets der Buchstaben im Characters-image berechnen **
; --------------------------------------------------------
  INIT_CHARACTERS_OFFSETS.W wst

; ** X-Positionen der Chars berechnen **
; --------------------------------------
  INIT_CHARACTERS_X_POSITIONS wst,SHIRES


; ** 1. Copperliste initialisieren **
; -----------------------------------
  CNOP 0,4
init_first_copperlist
  move.l  cl1_construction2(a3),a0 ;CL
  bsr.s   cl1_init_playfield_registers
  bsr.s   cl1_init_sprite_pointers
  IFNE open_border_enabled 
    bsr.s   cl1_init_bitplane_pointers
    bsr     cl1_init_branches_pointers
    bsr     cl1_init_copper_interrupt
    COP_LIST_END
    bsr     cl1_set_sprite_pointers
    bra     cl1_set_bitplane_pointers
  ELSE
    bsr.s   cl1_init_branches_pointers
    bsr     cl1_init_copper_interrupt
    COP_LIST_END
    bra     cl1_set_sprite_pointers
  ENDC

  IFNE open_border_enabled 
    COP_INIT_PLAYFIELD_REGISTERS cl1
    COP_INIT_SPRITE_POINTERS cl1
  ELSE
    COP_INIT_PLAYFIELD_REGISTERS cl1,NOBITPLANES
    COP_INIT_SPRITE_POINTERS cl1
  ENDC
  rts

  IFNE open_border_enabled 
    COP_INIT_BITPLANE_POINTERS cl1
  ENDC

  CNOP 0,4
cl1_init_branches_pointers
  move.l  #(((cl1_vstart1<<24)+(((cl1_hstart1/4)*2)<<16))|$10000)|$fffe,d0 ;WAIT-Befehl
  moveq   #2,d1              ;X-Verschiebung $00020000
  swap    d1
  moveq   #1,d2
  ror.l   #8,d2              ;Y-Additionswert $01000000
  moveq   #cl2_display_y_size-1,d7 ;Anzahl der Zeilen
cl1_init_branches_pointers_loop1
  move.w  #COP2LCH,(a0)
  addq.w  #4,a0
  move.w  #COP2LCL,(a0)
  addq.w  #4,a0
  moveq   #crz_disp_y_scale_factor-1,d6 ;Anzahl der Abschnitte für Y-Skalierung
cl1_init_branches_pointers_loop2
  move.l  d0,(a0)+           ;WAIT x,y
  move.w  #COP1LCH,(a0)
  addq.w  #4,a0
  move.w  #COP1LCL,(a0)
  addq.w  #4,a0
  eor.l   d1,d0              ;X-Shift
  add.l   d2,d0              ;nächste Zeile
  COP_MOVE_QUICK TRUE,COPJMP2
  dbf     d6,cl1_init_branches_pointers_loop2
  dbf     d7,cl1_init_branches_pointers_loop1
  rts

  COP_INIT_COPPER_INTERRUPT cl1,cl1_hstart2,cl1_vstart2

  COP_SET_SPRITE_POINTERS cl1,construction2,spr_number

  IFNE open_border_enabled 
    COP_SET_BITPLANE_POINTERS cl1,construction2,pf1_depth3
  ENDC

  COPY_COPPERLIST cl1,2

  CNOP 0,4
cl1_set_branches_pointers
  move.l  cl1_construction2(a3),a0 ;Aufbau-CL1
  moveq   #cl1_subextension1_size,d2
  move.l  cl2_construction2(a3),d0 ;Einsprungadresse = Aufbau-CL2
  MOVEF.L cl2_extension1_size,d3
  moveq   #cl1_extension1_size,d4
  bsr.s   cl1_set_jump_entry_pointers
  move.l  cl1_display(a3),a0 ;Darstellen-CL1
  move.l  cl2_display(a3),d0 ;Einsprungadresse = Darstellen-CL2

; ** Routine set-jump-entry_pointers **
; a0 ... Copperliste1
; d0 ... Einsprungadresse Copperliste2
; d2 ... cl1_subextension1_size
; d3 ... cl2_extension1_size
; d4 ... cl1_extension1_size
cl1_set_jump_entry_pointers
  MOVEF.L cl1_extension1_entry+cl1_ext1_subextension1_entry+cl1_subextension1_size,d1 ;Offset Rücksprungadresse CL1
  add.l   a0,d1              ;+ Rücksprungadresse CL1
  lea     cl1_extension1_entry+cl1_ext1_subextension1_entry+cl1_subext1_COP1LCH+2(a0),a1
  ADDF.W  cl1_extension1_entry+cl1_ext1_COP2LCH+2,a0
  moveq   #cl2_display_y_size-1,d7 ;Anzahl der Zeilen
cl1_set_branches_loop1
  swap    d0                 ;High
  move.w  d0,(a0)            ;COP2LCH
  swap    d0                 ;Low
  move.w  d0,4(a0)           ;COP2LCL
  moveq   #crz_disp_y_scale_factor-1,d6 ;Anzahl der Abschnitte für Y-Skalierung
cl1_set_branches_loop2
  swap    d1                 ;High-Wert
  move.w  d1,(a1)            ;COP1LCH
  swap    d1                 ;Low-Wert
  move.w  d1,4(a1)           ;COP1LCL
  add.l   d2,d1              ;Rücksprungadresse CL1 erhöhen
  add.l   d2,a1              ;nächste Zeile in Unterabschnitt der CL1
  dbf     d6,cl1_set_branches_loop2
  add.l   d3,d0              ;Einsprungadresse CL2 erhöhen
  add.l   d4,a0              ;nächste Zeile in CL1
  addq.l  #8,d1              ;CMOVE COP2LCH + CMOVE COP2LCL überspringen
  addq.w  #8,a1              ;CMOVE COP2LCH + CMOVE COP2LCL überspringen
  dbf     d7,cl1_set_branches_loop1
  rts

; ** 2. Copperliste initialisieren **
; -----------------------------------
  CNOP 0,4
init_second_copperlist
  move.l  cl2_construction2(a3),a0 ;Aufbau-CL

cl2_init_bplcon4_registers
  move.l  #(BPLCON4<<16)+bplcon4_bits,d0
  IFEQ open_border_enabled 
    move.w  #BPL1DAT,d1
  ENDC
  moveq   #cl2_display_y_size-1,d7
cl2_init_bplcon4_registers_loop1
  IFEQ open_border_enabled 
    move.w  d1,(a0)
    addq.w  #4,a0
  ENDC
  moveq   #cl2_display_width-1,d6 ;Anzahl der Spalten
cl2_init_bplcon4_registers_loop2
  move.l  d0,(a0)+           ;BPLCON4
  dbf     d6,cl2_init_bplcon4_registers_loop2
  COP_MOVE_QUICK TRUE,COPJMP1
  dbf     d7,cl2_init_bplcon4_registers_loop1
  rts

  COPY_COPPERLIST cl2,2


; ## Hauptprogramm ##
; -------------------
; a3 ... Basisadresse aller Variablen
; a4 ... CIA-A-Base
; a5 ... CIA-B-Base
; a6 ... DMACONR
  CNOP 0,4
main_routine
  bsr.s   no_sync_routines
  bra.s   beam_routines


; ## Routinen, die nicht mit der Bildwiederholfrequenz gekoppelt sind ##
; ----------------------------------------------------------------------
  CNOP 0,4
no_sync_routines
  rts


; ## Rasterstahl-Routinen ##
; --------------------------
  CNOP 0,4
beam_routines
  bsr     wait_copint
  bsr.s   swap_first_copperlist
  bsr.s   swap_second_copperlist
  bsr.s   wave_lores_scrolltext
  bsr     chunky_rotation_zoomer
  btst    #CIAB_GAMEPORT0,CIAPRA(a4) ;Auf linke Maustaste warten
  bne.s   beam_routines
  rts

; ** Copperlisten vertauschen **
; ------------------------------
  SWAP_COPPERLIST cl1,2

  SWAP_COPPERLIST cl2,2,NOSET

; ** Laufschrift **
; -----------------
  CNOP 0,4
wave_lores_scrolltext
  movem.l a4-a6,-(a7)
  lea     wst_characters_x_positions(pc),a2 ;X-Positionen der Chars
  lea     spr_pointers_display(pc),a4 ;Zeiger auf Sprites
  lea     sine_table(pc),a5  ;Zeiger auf Sinustabelle
  move.w  wst_y_angle(a3),d4  ;Y-Winkel
  move.w  d4,d0              
  addq.w  #wst_y_angle_speed,d0 ;nächster Y-Winkel
  move.w  #wst_horiz_scroll_speed,a6
  and.w   #sine_table_length-1,d0 ;Überlauf entfernen
  move.w  d0,wst_y_angle(a3) 
  moveq   #wst_image_plane_width-4,d3
  moveq   #wst_text_characters_number-1,d7 ;Anzahl der Chars
wst_loop1
  move.l  (a4)+,a1           ;Zeiger auf Sprite-Struktur
  move.w  (a2),d5            ;X-Position
  move.w  d5,d0              
  move.l  (a5,d4.w*4),d1     ;sin(w)
  MULUF.L wst_y_radius*2,d1,d2 ;y'=(yr*sin(w))/2^15
  add.w   #(display_window_HSTART-wst_text_character_x_size)*4,d0 ;X-Zentrierung
  swap    d1
  SUBF.W  wst_y_angle_step,d4 ;nächster Buchstabe
  add.w   #wst_y_centre,d1  ;Y-Zentrierung
  moveq   #wst_text_character_y_size,d2 ;Höhe
  add.w   d1,d2              ;Höhe zu Y-Position addieren
  SET_SPRITE_POSITION d0,d1,d2
  move.w  d1,(a1)            ;SPRxPOS
  and.w   #sine_table_length-1,d4 ;Überlauf entfernen
  move.w  d2,spr_pixel_per_datafetch/8(a1) ;SPRxCTL
  sub.w   a6,d5              ;X-Position reduzieren
  bpl.s   wst_no_new_character_image ;Wenn positiv -> verzweige
  add.w   #wst_text_character_x_restart,d5 ;X-Pos zurücksetzen
  bsr.s   wst_get_new_character_image
  move.l  d0,a0              ;Neues Bild für Character
  ADDF.W  (spr_pixel_per_datafetch/8)*2,a1 ;Sprite-Header überpsringen
  moveq   #wst_text_character_y_size-1,d6 ;Anzahl der Zeilen zum kopieren
wst_loop2
  move.l  (a0)+,(a1)+        ;64 Pixel BP0
  move.l  (a0),(a1)+
  add.l   d3,a0              ;nächste Zeile in Quelle
  move.l  (a0)+,(a1)+        ;64 Pixel BP1
  move.l  (a0),(a1)+
  add.l   d3,a0              ;nächste Zeile in Quelle
  dbf     d6,wst_loop2
wst_no_new_character_image
  move.w  d5,(a2)+           ;X-Position retten
  dbf     d7,wst_loop1
  movem.l (a7)+,a4-a6
  rts

; ** Neues Image für Character ermitteln **
; -----------------------------------------
  GET_NEW_CHARACTER_IMAGE.W wst

; ** Playfield rotieren/zoomen **
; --------------------------
  CNOP 0,4
chunky_rotation_zoomer
  movem.l a3-a6,-(a7)
  lea     sine_table(pc),a0  
  move.w  crz_z_rotation_angle(a3),d4 ;Rotations-Winkel 
  move.w  d4,d3              ;Rotations-Winkel retten
  move.w  crz_zoom_angle(a3),d5 ;Zoom-Winkel 
  IFNE crz_table_length_256
    MOVEF.W sine_table_length-1,d6 ;Überlauf
  ENDC
  move.w  2(a0,d4.w*4),d1     ;sin(w)
  IFEQ crz_table_length_256
    add.b   #sine_table_length/4,d4 ;+ 90 Grad
  ELSE
    add.w   #sine_table_length/4,d4 ;+ 90 Grad
  ENDC
  move.w  2(a0,d5.w*4),d2     ;sin(w) für Zoom
  IFEQ crz_table_length_256
    addq.b  #crz_z_rotation_angle_speed,d3 ;nächster Rotations-Winkel
  ELSE
    and.w   d6,d4            ;Überlauf entfernen
    addq.w  #crz_z_rotation_angle_speed,d3 ;nächster Rotations-Winkel
  ENDC
  move.w  2(a0,d4.w*4),d0     ;cos(w)
  IFEQ crz_table_length_256
    addq.b  #crz_zoom_angle_speed,d5 ;nächster Zoom-Winkel
  ELSE
    btst    #2,$dff016
    bne.s   skip
    addq.w  #crz_zoom_angle_speed,d5 ;nächster Zoom-Winkel
skip
    and.w   d6,d3            ;Überlauf entfernen
    and.w   d6,d5            ;Überlauf entfernen
  ENDC

; ** Zoomfaktor berechnen **
; --------------------------
  ;MULSF.W crz_zoom_radius*2,d2,d6 ;zoom=(zoomr*sin(w))/2^15
  ;swap    d2
  asr.w   #5,d2              ;zoom'=(zoomr*sin(w))/2^15
  move.w  d3,crz_z_rotation_angle(a3) ;Rotations-Winkel retten
  add.w   #crz_zoom_centre,d2 ;+ Zoom-Mittelpunkt
  move.w  d5,crz_zoom_angle(a3) ;Zoom-Winkel retten
  muls.w  d2,d0              ;x'=(zoom'*cos(w))/2^15
  muls.w  d2,d1              ;y'=(zoom'*sin(w))/2^15
  swap    d0
  swap    d1

; ** Rotation um die Z-Achse **
; -----------------------------
  moveq   #crz_Ax,d2         ;X links oben
  muls.w  d0,d2              ;Ax*cos(w)
  moveq   #crz_Ay,d3         ;Y links oben
  muls.w  d1,d3              ;Ay*sin(w)
  lea     crz_switch_table(pc),a0 ;Zeiger auf Tabelle mit Switchwerten
  add.l   d3,d2              ;Ax'=Ax*cos(w)+Ay*sin(w)
  moveq   #crz_Bx,d3         ;X rechts oben
  muls.w  d1,d3              ;Bx*sin(w)
  moveq   #crz_By,d4         ;Y rechts oben
  muls.w  d0,d4              ;By*cos(w)
  add.w   #crz_z_rotation_x_centre<<8,d2 ;x' + X-Mittelpunkt
  add.l   d4,d3              ;By'=Bx*sin(w)+By*cos(w)

; ** Translation **
; -----------------
  move.w  d2,a5              ;X-Mittelpunkt retten
  add.w   #crz_z_rotation_y_centre<<8,d3 ;y' + Y-Mittelpunkt
  move.l  cl2_construction2(a3),a1
  move.w  d3,a4              ;Y-Mittelpunkt retten

; ** Farbwerte in Copperliste kopieren **
; ---------------------------------------
  move.l  a7,save_a7(a3)     
  move.w  #cl2_extension1_size,a2
  move.w  d0,a3              ;cos(w) retten
  move.w  d1,a7              ;sin(w)
  add.w   a3,a3              ;*2 ist notwendig, um die 2:1 Pixelverzerrung auszugleichen
  ADDF.W  cl2_extension1_entry+cl2_ext1_BPLCON4_1+2,a1 ;CL
  move.w  #(cl2_extension1_size*cl2_display_y_size)-4,a6
  add.w   a7,a7              ;*2 ist notwendig, um die 2:1 Pixelverzerrung auszugleichen
  moveq   #TRUE,d2           ;Langwortzugriff
  moveq   #cl2_display_width-1,d7 ;Anzahl der Spalten
chunky_rotation_zoomer_loop1
  move.w  a5,d4              ;X Linke obere Ecke in Playfield
  move.w  a4,d5              ;Y Linke obere Ecke in Playfield
  moveq   #cl2_display_y_size-1,d6 ;Anzahl der Zeilen
chunky_rotation_zoomer_loop2
  move.w  d4,d3              ;X-Pos in Playfield 
  move.w  d5,d2              ;Y-Pos in Playfield 
  lsr.w   #8,d3              ;Bits in richtige Postion bringen
  add.w   d1,d4              ;nächste Pixel-Spalte in Playfield
  move.b  d3,d2              ;Bits 15-8 = Y-Offset, Bits 7-0 = X-Offset
  add.w   d0,d5              ;nächste Pixel-Zeile in Playfield
  move.b  (a0,d2.l),(a1)     ;Switchwert setzen
  add.l   a2,a1              ;nächste Zeile in CL
  dbf     d6,chunky_rotation_zoomer_loop2
  sub.w   a7,a4              ;nächste Y-Pos in Playfield
  add.w   a3,a5              ;nächste X-Pos in Playfield
  sub.l   a6,a1              ;nächste Spalte in CL
  dbf     d7,chunky_rotation_zoomer_loop1
  move.l  variables+save_a7(pc),a7 ;Alter Stackpointer
  movem.l (a7)+,a3-a6
  rts


; ## Interrupt-Routinen ##
; ------------------------
  
  INCLUDE "int-autovectors-handlers.i"

  IFEQ pt_ciatiming_enabled
; ** CIA-B timer A interrupt server **
; ------------------------------------
  CNOP 0,4
ciab_ta_int_server
  ENDC

  IFNE pt_ciatiming_enabled
; ** Vertical blank interrupt server **
; -------------------------------------
  CNOP 0,4
VERTB_int_server
  ENDC

  IFEQ pt_music_fader_enabled
    bsr.s   pt_fade_out_music
    bra.s   pt_PlayMusic

; ** Musik ausblenden **
; ----------------------
  PT_FADE_OUT

  ENDC

; ** PT-replay routine **
; -----------------------
  IFEQ pt_music_fader_enabled
    CNOP 0,4
  ENDC
  IFD pt_v2.3a
    PT2_REPLAY
  ENDC
  IFD pt_v3.0b
    PT3_REPLAY
  ENDC

; ** CIA-B Timer B interrupt server **
  CNOP 0,4
ciab_tb_int_server
  PT_TIMER_INTERRUPT_SERVER

; ** Level-6-Interrupt-Server **
; ------------------------------
  CNOP 0,4
EXTER_int_server
  rts

; ** Level-7-Interrupt-Server **
; ------------------------------
  CNOP 0,4
NMI_int_server
  rts


; ## Hilfsroutinen ##
; -------------------

  INCLUDE "help-routines.i"


; ## Speicherstellen für Tabellen und Strukturen ##
; -------------------------------------------------

  INCLUDE "sys-structures.i"

; ** Farben des ersten Playfields **
; ----------------------------------
  CNOP 0,4
pf1_color_table
  INCLUDE "Daten:Asm-Sources.AGA/old'scool-intro/colourtables/256x256x128-Tunnel.ct"

; ** Farben der Sprites **
; ------------------------
spr_color_table
  DC.L $000000,$fffffe,$8b888b,$373735
  DC.L $000000,$fffffe,$8b888b,$373735
  DC.L $000000,$fffffe,$8b888b,$373735
  REPT 4
    DC.L $000000
  ENDR

; ** Adressen der Sprites **
; --------------------------
spr_pointers_display
  DS.L spr_number

; ** Sinus / Cosinustabelle **
; ----------------------------
  CNOP 0,2
sine_table
  INCLUDE "sine-table-512x32.i"

; ** Tables for effect commands **
; --------------------------------
; ** "Invert Loop" **
  INCLUDE "music-tracker/pt-invert-table.i"

; ** "Vibrato/Tremolo" **
  INCLUDE "music-tracker/pt-vibrato-tremolo-table.i"

; ** "Arpeggio/Tone Portamento" **
  IFD pt_v2.3a
    INCLUDE "music-tracker/pt2-period-table.i"
  ENDC
  IFD pt_v3.0b
    INCLUDE "music-tracker/pt3-period-table.i"
  ENDC

; ** Temporary channel structures **
; ----------------------------------
  INCLUDE "music-tracker/pt-temp-channel-data-tables.i"

; ** Pointers to samples **
; -------------------------
  INCLUDE "music-tracker/pt-sample-starts-table.i"

; ** Pointers to priod tables for different tuning **
; ---------------------------------------------------
  INCLUDE "music-tracker/pt-finetune-starts-table.i"

; **** Wave-Scrolltext ****
; ** ASCII-Buchstaben **
; ----------------------
wst_ascii
  DC.B "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789.!?-'():\/*# "
wst_ascii_end
  EVEN

; ** Offsets der einzelnen Chars **
; ---------------------------------
  CNOP 0,2
wst_characters_offsets
  DS.W wst_ascii_end-wst_ascii
  
; ** X-Koordinaten der einzelnen Chars der Laufschrift **
; -------------------------------------------------------
wst_characters_x_positions
  DS.W wst_text_characters_number


; ## Speicherstellen allgemein ##
; -------------------------------

  INCLUDE "sys-variables.i"


; ## Speicherstellen für Namen ##
; -------------------------------

  INCLUDE "sys-names.i"


; ## Speicherstellen für Texte ##
; -------------------------------

  INCLUDE "error-texts.i"

; **** Wave-Scrolltext ****
; ** Text für Laufschrift **
; --------------------------
wst_text
  DC.B "WATCH OUT!  A SCROLLTEXT WITH 64 PIXEL WIDE SPRITES!"
  REPT wst_text_characters_number/(wst_origin_character_x_size/wst_text_character_x_size)
    DC.B " "
  ENDR
  DC.B FALSE
  EVEN

; **** Chunky-Rotation-Zoomer ****
; ** Tabelle mit Switchwerten des Playfieldes **
; -----------------------------------------
crz_switch_table
  DS.B crz_image_x_size*crz_image_y_size

; ** Programmversion für Version-Befehl **
; ----------------------------------------
program_version DC.B "$VER: old'scool-intro 1.0 beta (10.7.23)",TRUE
  EVEN


; ## Audiodaten nachladen ##
; --------------------------

; **** PT-Replay ****
  IFNE pt_split_module_enabled
pt_auddata SECTION audio,DATA_C
    INCBIN "Daten:Asm-Sources.AGA/old'scool-intro/module/mod.ClassicTune14remix"
  ELSE
pt_auddata SECTION audio,DATA
    INCBIN "Daten:Asm-Sources.AGA/old'scool-intro/module/MOD.ClassicTune14Remix.song"

pt_audsmps SECTION audio2,DATA_C
    INCBIN "Daten:Asm-Sources.AGA/old'scool-intro/module/MOD.ClassicTune14Remix.smps"
  ENDC


; ## Grafikdaten nachladen ##
; ---------------------------

; **** Chunky-Rotation-Zoomer ****
crz_image_data SECTION crz_gfx,DATA
  INCBIN "Daten:Asm-Sources.AGA/old'scool-intro/graphics/256x256x128-Tunnel.rawblit"

; **** Wave-Scrolltext ****
wst_image_data SECTION wst_gfx,DATA
  INCBIN "Sprites.AGA:Grafik/64x56x4-Antialiased-Font.rawblit"

  END
