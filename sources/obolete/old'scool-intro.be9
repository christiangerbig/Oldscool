; #################################
; # Programm: old'scool-intro.asm #
; # Autor:    Christian Gerbig    #
; # Datum:    10.07.2023          #
; # Version:  1.0 beta            #
; # CPU:      68020+              #
; # FASTMEM:  -                   #
; # Chipset:  AGA                 #
; # OS:       3.0+                #
; #################################

; Version 1.0 beta

; Ausführungszeit 68020: n Rasterzeilen

  SECTION code_and_variables,CODE

  MC68040


; ** Library-Includes V.3.x nachladen **
  INCDIR "Daten:include3.5/"

  INCLUDE "exec/exec.i"
  INCLUDE "exec/exec_lib.i"

  INCLUDE "dos/dos.i"
  INCLUDE "dos/dos_lib.i"
  INCLUDE "dos/dosextens.i"

  INCLUDE "graphics/gfxbase.i"
  INCLUDE "graphics/graphics_lib.i"
  INCLUDE "graphics/videocontrol.i"

  INCLUDE "intuition/intuition.i"
  INCLUDE "intuition/intuition_lib.i"

  INCLUDE "libraries/any_lib.i"

  INCLUDE "resources/cia_lib.i"

  INCLUDE "hardware/adkbits.i"
  INCLUDE "hardware/blit.i"
  INCLUDE "hardware/cia.i"
  INCLUDE "hardware/custom.i"
  INCLUDE "hardware/dmabits.i"
  INCLUDE "hardware/intbits.i"

  INCDIR "Daten:Asm-Sources.AGA/normsource-includes/"


; ** Konstanten **
  INCLUDE "equals.i"

requires_68030             EQU FALSE
requires_68040             EQU FALSE
requires_68060             EQU FALSE
requires_fast_memory       EQU FALSE
requires_multiscan_monitor EQU FALSE

workbench_start_enabled    EQU FALSE
workbench_fade_enabled     EQU FALSE
text_output_enabled        EQU FALSE

pt_v3.0b
pt_ciatiming_enabled      EQU TRUE
pt_usedfx         EQU %1111010101011001
pt_usedefx        EQU %0000100000000000
pt_finetune_enabled       EQU FALSE
  IFD pt_v3.0b
pt_metronome_enabled      EQU FALSE
  ENDC
pt_track_volumes_enabled    EQU FALSE
pt_track_periods_enabled EQU FALSE
pt_music_fader_enabled    EQU TRUE
pt_split_module_enabled   EQU -1;TRUE

open_border_enabled  EQU TRUE
crz_table_length_256 EQU FALSE
bv_EpRGB_check_max   EQU FALSE

dma_bits EQU DMAF_BLITTER+DMAF_SPRITE+DMAF_COPPER+DMAF_RASTER+DMAF_MASTER+DMAF_SETCLR

  IFEQ pt_ciatiming_enabled
intena_bits EQU INTF_EXTER+INTF_INTEN+INTF_SETCLR
  ELSE                         
intena_bits EQU INTF_VERTB+INTF_EXTER+INTF_INTEN+INTF_SETCLR
  ENDC

ciaa_icr_bits EQU CIAICRF_SETCLR
  IFEQ pt_ciatiming_enabled
ciab_icr_bits EQU CIAICRF_TA+CIAICRF_TB+CIAICRF_SETCLR
  ELSE
ciab_icr_bits EQU CIAICRF_TB+CIAICRF_SETCLR
  ENDC

copcon_bits EQU TRUE

pf1_x_size1       EQU 0
pf1_y_size1       EQU 0
pf1_depth1        EQU 0
pf1_x_size2       EQU 0
pf1_y_size2       EQU 0
pf1_depth2        EQU 0
pf1_x_size3       EQU 320
pf1_y_size3       EQU 256
pf1_depth3        EQU 4
pf1_colors_number EQU 128

pf2_x_size1       EQU 0
pf2_y_size1       EQU 0
pf2_depth1        EQU 0
pf2_x_size2       EQU 0
pf2_y_size2       EQU 0
pf2_depth2        EQU 0
pf2_x_size3       EQU 0
pf2_y_size3       EQU 0
pf2_depth3        EQU 0
pf2_colors_number EQU 0
pf_colors_number  EQU pf1_colors_number+pf2_colors_number
pf_depth          EQU pf1_depth3+pf2_depth3

extra_pf_number  EQU 3
extra_pf1_x_size EQU 128
extra_pf1_y_size EQU 128
extra_pf1_depth  EQU 2
extra_pf2_x_size EQU 128
extra_pf2_y_size EQU 128
extra_pf2_depth  EQU 2
extra_pf3_x_size EQU 128
extra_pf3_y_size EQU 128
extra_pf3_depth  EQU 2

spr_number                  EQU 8
spr_x_size1                 EQU 64
spr_x_size2                 EQU 64
spr_depth                   EQU 2
spr_colors_number           EQU 16
spr_odd_color_table_select  EQU 8
spr_even_color_table_select EQU 8
spr_used_number             EQU 6
spr_swap_number             EQU 2

  IFD pt_v2.3a
audio_memory_size EQU 0
  ENDC
  IFD pt_v3.0b
audio_memory_size EQU 2
  ENDC

disk_memory_size EQU 0

extra_memory_sizeEQU 0

chip_memory_size EQU 0

OS_VERSION_AGA EQU 39

ciaa_cra_bits      EQU CIACRAF_LOAD+CIACRAF_RUNMODE ;oneshot
  IFEQ pt_ciatiming_enabled
ciab_cra_bits      EQU CIACRBF_LOAD
  ENDC
ciab_crb_bits      EQU CIACRBF_LOAD+CIACRBF_RUNMODE ;Oneshot mode
ciaa_ta_time      EQU 60 ;85 µs
ciaa_tb_time      EQU 0
  IFEQ pt_ciatiming_enabled
ciab_ta_time      EQU 14187 ;= 0.709379 MHz * [20000 µs = 50 Hz duration for one frame on a PAL machine]
;ciab_ta_time      EQU 14318 ;= 0.715909 MHz * [20000 µs = 50 Hz duration for one frame on a NTSC machine]
  ELSE
ciab_ta_time      EQU 0
  ENDC
ciab_tb_time      EQU 362 ;= 0.709379 MHz * [511.43 µs = Lowest note period C1 with Tuning=-8 * 2 / PAL clock constant = 907*2/3546895 ticks per second]
                      ;= 0.715909 MHz * [506.76 µs = Lowest note period C1 with Tuning=-8 * 2 / NTSC clock constant = 907*2/3579545 ticks per second]
ciaa_ta_continuous_enabled EQU FALSE
ciaa_tb_continuous_enabled EQU FALSE
  IFEQ pt_ciatiming_enabled
ciab_ta_continuous_enabled EQU TRUE
  ELSE
ciab_ta_continuous_enabled EQU FALSE
  ENDC
ciab_tb_continuous_enabled EQU FALSE

beam_position EQU $136

pixel_per_line        EQU 320
visible_pixels_number EQU 320
visible_lines_number  EQU 256
MINROW                EQU VSTART_256_LINES

pf_pixel_per_datafetch  EQU 64 ;4x
DDFSTRT_bits            EQU DDFSTART_320_pixel
DDFSTOP_bits            EQU DDFSTOP_320_PIXEL_4X
spr_pixel_per_datafetch EQU 64 ;4x

display_window_hstart EQU HSTART_320_PIXEL
display_window_vstart EQU MINROW
diwstrt_bits          EQU ((display_window_VSTART&$ff)*DIWSTRTF_V0)+(display_window_HSTART&$ff)
display_window_hstop  EQU HSTOP_320_pixel
display_window_vstop  EQU VSTOP_256_lines
diwstop_bits          EQU ((display_window_VSTOP&$ff)*DIWSTOPF_V0)+(display_window_HSTOP&$ff)

pf1_plane_width       EQU pf1_x_size3/8
data_fetch_width      EQU pixel_per_line/8
pf1_plane_moduli      EQU (pf1_plane_width*(pf1_depth3-1))+pf1_plane_width-data_fetch_width
extra_pf_plane_width1 EQU extra_pf1_x_size/8
extra_pf_plane_width2 EQU extra_pf2_x_size/8
extra_pf_plane_width3 EQU extra_pf3_x_size/8

BPLCON0_bits EQU BPLCON0F_ECSENA+BPLCON0F_COLOR
bplcon0_bits2 EQU BPLCON0F_ECSENA+((pf_depth>>3)*BPLCON0F_BPU3)+(BPLCON0F_COLOR)+((pf_depth&$07)*BPLCON0F_BPU0) 
bplcon1_bits EQU TRUE
bplcon2_bits EQU TRUE
bplcon3_bits1 EQU BPLCON3F_SPRES0
bplcon3_bits2 EQU bplcon3_bits1+BPLCON3F_LOCT
bplcon4_bits EQU (BPLCON4F_OSPRM4*spr_odd_color_table_select)+(BPLCON4F_ESPRM4*spr_even_color_table_select)
diwhigh_bits EQU DIWHIGHF_HSTOP1+(((display_window_HSTOP&$100)>>8)*DIWHIGHF_HSTOP8)+(((display_window_VSTOP&$700)>>8)*DIWHIGHF_VSTOP8)+DIWHIGHF_hstart1+(((display_window_HSTART&$100)>>8)*DIWHIGHF_HSTART8)+((display_window_VSTART&$700)>>8)
fmode_bits   EQU FMODEF_BPL32+FMODEF_SPR32+FMODEF_BPAGEM+FMODEF_SPAGEM
color00_bits EQU $090911

crz_display_y_scale_factor EQU 4

cl2_display_x_size EQU visible_pixels_number+8
cl2_display_width  EQU cl2_display_x_size/8
cl2_display_y_size EQU visible_lines_number/crz_display_y_scale_factor
  IFNE open_border_enabled
cl1_hstart1        EQU display_window_HSTART-(7*CMOVE_SLOT_PERIOD)
  ELSE
cl1_hstart1        EQU display_window_HSTART-(8*CMOVE_SLOT_PERIOD)
  ENDC
cl1_vstart1        EQU MINROW
cl1_hstart2        EQU $00
cl1_vstart2        EQU beam_position&$ff

; **** PT-Replay ****
  IFD pt_v2.3a
    INCLUDE "music-tracker/pt2-equals.i"
  ENDC
  IFD pt_v3.0b
    INCLUDE "music-tracker/pt3-equals.i"
  ENDC

  IFEQ pt_music_fader_enabled
pt_fade_out_delay EQU 2 ;Ticks
  ENDC

sine_table_length EQU 512

; **** Chunky-Rotation-Zoomer ****
crz_image_x_size EQU 256
crz_image_plane_width  EQU crz_image_x_size/8
crz_image_y_size EQU 256
crz_image_depth  EQU 7

crz_Ax EQU -40;-32;-((cl2_display_width-1)/2)
crz_Ay EQU -32;-(cl2_display_y_size/2)
crz_Bx EQU 40;32;(cl2_display_width-1)/2
crz_By EQU -32;-32;-(cl2_display_y_size/2)

crz_z_rotation_x_centre    EQU crz_image_x_size/2
crz_z_rotation_y_centre    EQU crz_image_y_size/2
crz_z_rotation_angle_speed EQU 3

crz_d                EQU 250 ;1000
crz_zoom_radius      EQU 1024
crz_zoom_centre      EQU 1024+crz_d
crz_zoom_angle_speed EQU 1

; **** Wave-Scrolltext ****
wst_used_sprites_number EQU 6

wst_image_x_size EQU 640
wst_image_plane_width  EQU wst_image_x_size/8
wst_image_depth  EQU 2

wst_origin_character_x_size EQU 64
wst_origin_character_y_size EQU 56
wst_origin_character_depth  EQU wst_image_depth

wst_text_character_x_size EQU wst_origin_character_x_size
wst_text_character_width  EQU wst_text_character_x_size/8
wst_text_character_y_size EQU wst_origin_character_y_size
wst_text_character_depth  EQU wst_image_depth

wst_horiz_scroll_window_x_size EQU visible_pixels_number+wst_text_character_x_size
wst_horiz_scroll_window_width  EQU wst_horiz_scroll_window_x_size/8
wst_horiz_scroll_window_y_size EQU wst_text_character_y_size
wst_horiz_scroll_window_depth  EQU wst_text_character_depth
wst_horiz_scroll_speed         EQU 12
wst_horiz_scroll_speed_slow    EQU 10
wst_horiz_scroll_speed_fast    EQU 17

wst_text_character_x_restart EQU wst_horiz_scroll_window_x_size*4 ;*4 da superhires Pixel
wst_text_characters_number   EQU wst_horiz_scroll_window_x_size/wst_text_character_x_size

wst_y_radius      EQU (visible_lines_number-wst_text_character_y_size)/2
wst_y_centre      EQU ((visible_lines_number-wst_text_character_y_size)/2)+display_window_VSTART
wst_y_angle_speed EQU 5
wst_y_angle_step  EQU sine_table_length/wst_text_characters_number

; **** Blenk-Vectors ****
bv_d EQU 256
bv_xy_rotation_centre       EQU extra_pf2_x_size/2
bv_x_rotation_angle_speed1  EQU 4
bv_y_rotation_angle_speed1  EQU 2
bv_z_rotation_angle_speed1  EQU 6 ;2

bv_x_rotation_angle_speed2  EQU 2
bv_y_rotation_angle_speed2  EQU 2
bv_z_rotation_angle_speed2  EQU 1

bv_x_rotation_angle_speed3  EQU 3
bv_y_rotation_angle_speed3  EQU 1
bv_z_rotation_angle_speed3  EQU 3

bv_x_rotation_angle_speed4  EQU 3
bv_y_rotation_angle_speed4  EQU 1
bv_z_rotation_angle_speed4  EQU 2

bv_x_rotation_angle_speed5  EQU 4
bv_y_rotation_angle_speed5  EQU 1
bv_z_rotation_angle_speed5  EQU 2

bv_x_rotation_angle_speed6  EQU 2
bv_y_rotation_angle_speed6  EQU 1
bv_z_rotation_angle_speed6  EQU 5

bv_x_rotation_angle_speed7  EQU 2
bv_y_rotation_angle_speed7  EQU 4
bv_z_rotation_angle_speed7  EQU 2

bv_x_rotation_angle_speed8  EQU 1
bv_y_rotation_angle_speed8  EQU 4
bv_z_rotation_angle_speed8  EQU 2

bv_x_rotation_angle_speed9  EQU 3
bv_y_rotation_angle_speed9  EQU 4
bv_z_rotation_angle_speed9  EQU 1

bv_x_rotation_angle_speed10 EQU 4
bv_y_rotation_angle_speed10 EQU 4
bv_z_rotation_angle_speed10 EQU 1

bv_object1_edge_points_number   EQU 8
bv_object1_edge_points_per_face EQU 4
bv_object1_faces_number         EQU 6
bv_object1_face1_color          EQU 1
bv_object1_face1_lines_number   EQU 4
bv_object1_face2_color          EQU 1
bv_object1_face2_lines_number   EQU 4
bv_object1_face3_color          EQU 2
bv_object1_face3_lines_number   EQU 4
bv_object1_face4_color          EQU 2
bv_object1_face4_lines_number   EQU 4
bv_object1_face5_color          EQU 3
bv_object1_face5_lines_number   EQU 4
bv_object1_face6_color          EQU 3
bv_object1_face6_lines_number   EQU 4

bv_light_z_coordinate EQU -55
bv_EpRGB              EQU $3f ;Intensität der Lichtquelle
bv_kdRGB              EQU 6 ;Reflexion der Fläche = Helligkeit des Objekts
bv_D0                 EQU 13 ;Helligkeitsverlust, Schutz vor Division durch Null

bv_image_x_size EQU 128
bv_image_y_size EQU 128
bv_image_depth  EQU 2

bv_used_sprites_number EQU 2

bv_sprite_x_direction_speed EQU 3
bv_sprite_y_direction_speed EQU 2
bv_sprite_x_centre          EQU display_window_HSTART*4
bv_sprite_y_centre          EQU display_window_VSTART
bv_sprite_x_min             EQU 0
bv_sprite_x_max             EQU (visible_pixels_number-(bv_image_x_size+80+60))*4
bv_sprite_y_min             EQU 0
bv_sprite_y_max             EQU visible_lines_number-bv_image_y_size

bv_wobble_x_radius             EQU 80/2
bv_wobble_x_centre             EQU 80/2
bv_wobble_x_radius_angle_speed EQU 1
bv_wobble_x_radius_angle_step  EQU 2
bv_wobble_x_angle_speed        EQU 2
bv_wobble_x_angle_step         EQU 1

; **** Clear-Blit ****
bv_clear_blit_x_size EQU extra_pf1_x_size
bv_clear_blit_y_size EQU extra_pf1_y_size
bv_clear_blit_depth  EQU extra_pf1_depth

; **** Fill-Blit ****
bv_fill_blit_x_size EQU extra_pf1_x_size
bv_fill_blit_y_size EQU extra_pf1_y_size
bv_fill_blit_depth  EQU extra_pf1_depth

; **** Keyboard-Handler ****
kh_key1  EQU $50 ;F1
kh_key2  EQU $51 ;F2
kh_key3  EQU $52 ;F3
kh_key4  EQU $53 ;F4
kh_key5  EQU $54 ;F5
kh_key6  EQU $55 ;F6
kh_key7  EQU $56 ;F7
kh_key8  EQU $57 ;F8
kh_key9  EQU $58 ;F9
kh_key10 EQU $59 ;F10

; **** Background-Image ****
bg_image_x_size        EQU 320
bg_image_plane_width         EQU bg_image_x_size/8
bg_image_y_size        EQU 57
bg_image_depth         EQU 4
bg_image_colors_number EQU 16

; **** Image-Fader ****
ifi_fader_speed_max   EQU 2
ifi_fader_centre      EQU ifi_fader_speed_max+1
ifi_fader_radius      EQU ifi_fader_speed_max
ifi_fader_angle_speed EQU 1

ifo_fader_speed_max   EQU 4
ifo_fader_centre      EQU ifo_fader_speed_max+1
ifo_fader_radius      EQU ifo_fader_speed_max
ifo_fader_angle_speed EQU 1

; **** Blind-Fader ****
bf_lamellas_number EQU 8
bf_lamella_height  EQU 8
bf_step1           EQU 1
bf_step2           EQU 1
bf_speed           EQU 1
bf_table_length    EQU bf_lamella_height*4

; **** Cube-Zoomer ****
czi_zoom_radius      EQU 32768
czi_zoom_centre      EQU 32768
czi_zoom_angle_speed EQU 1
czo_zoom_radius      EQU 32768
czo_zoom_centre      EQU 32768
czo_zoom_angle_speed EQU 1


color_step1          EQU 4
color_values_number1 EQU 64
segments_number1     EQU 1



; ** Struktur, die alle Exception-Vektoren-Offsets enthält **
  INCLUDE "except-vectors-offsets.i"


; ** Struktur, die alle Eigenschaften des Extra-Playfields enthält **
  INCLUDE "extra-pf-attributes-structure.i"


; ** Struktur, die alle Eigenschaften der Sprites enthält **
  INCLUDE "sprite-attributes-structure.i"


; ** Struktur, die alle Registeroffsets der ersten Copperliste enthält **

  RSRESET

cl1_subextension1      RS.B 0
cl1_subext1_WAIT       RS.L 1
cl1_subext1_SPR6POS    RS.L 1
cl1_subext1_SPR7POS    RS.L 1
cl1_subext1_COP1LCH    RS.L 1
cl1_subext1_COP1LCL    RS.L 1
cl1_subext1_COPJMP2    RS.L 1
cl1_subextension1_size RS.B 0

  RSRESET

cl1_extension1               RS.B 0
cl1_ext1_COP2LCH             RS.L 1
cl1_ext1_COP2LCL             RS.L 1
cl1_ext1_subextension1_entry RS.B cl1_subextension1_size*crz_display_y_scale_factor
cl1_extension1_size          RS.B 0

  RSRESET

cl1_begin            RS.B 0

  INCLUDE "copperlist1-offsets.i"

cl1_extension1_entry RS.B cl1_extension1_size*cl2_display_y_size
cl1_WAIT1            RS.L 1
cl1_WAIT2            RS.L 1
cl1_INTENA           RS.L 1

cl1_end              RS.L 1

copperlist1_size     RS.B 0


; ** Struktur, die alle Registeroffsets der zweiten Copperliste enthält **
  RSRESET

cl2_extension1      RS.B 0

  IFEQ open_border_enabled 
cl2_ext1_BPL1DAT    RS.L 1
  ENDC
cl2_ext1_BPLCON4_1  RS.L 1
cl2_ext1_BPLCON4_2  RS.L 1
cl2_ext1_BPLCON4_3  RS.L 1
cl2_ext1_BPLCON4_4  RS.L 1
cl2_ext1_BPLCON4_5  RS.L 1
cl2_ext1_BPLCON4_6  RS.L 1
cl2_ext1_BPLCON4_7  RS.L 1
cl2_ext1_BPLCON4_8  RS.L 1
cl2_ext1_BPLCON4_9  RS.L 1
cl2_ext1_BPLCON4_10 RS.L 1
cl2_ext1_BPLCON4_11 RS.L 1
cl2_ext1_BPLCON4_12 RS.L 1
cl2_ext1_BPLCON4_13 RS.L 1
cl2_ext1_BPLCON4_14 RS.L 1
cl2_ext1_BPLCON4_15 RS.L 1
cl2_ext1_BPLCON4_16 RS.L 1
cl2_ext1_BPLCON4_17 RS.L 1
cl2_ext1_BPLCON4_18 RS.L 1
cl2_ext1_BPLCON4_19 RS.L 1
cl2_ext1_BPLCON4_20 RS.L 1
cl2_ext1_BPLCON4_21 RS.L 1
cl2_ext1_BPLCON4_22 RS.L 1
cl2_ext1_BPLCON4_23 RS.L 1
cl2_ext1_BPLCON4_24 RS.L 1
cl2_ext1_BPLCON4_25 RS.L 1
cl2_ext1_BPLCON4_26 RS.L 1
cl2_ext1_BPLCON4_27 RS.L 1
cl2_ext1_BPLCON4_28 RS.L 1
cl2_ext1_BPLCON4_29 RS.L 1
cl2_ext1_BPLCON4_30 RS.L 1
cl2_ext1_BPLCON4_31 RS.L 1
cl2_ext1_BPLCON4_32 RS.L 1
cl2_ext1_BPLCON4_33 RS.L 1
cl2_ext1_BPLCON4_34 RS.L 1
cl2_ext1_BPLCON4_35 RS.L 1
cl2_ext1_BPLCON4_36 RS.L 1
cl2_ext1_BPLCON4_37 RS.L 1
cl2_ext1_BPLCON4_38 RS.L 1
cl2_ext1_BPLCON4_39 RS.L 1
cl2_ext1_BPLCON4_40 RS.L 1
cl2_ext1_BPLCON4_41 RS.L 1
cl2_ext1_COPJMP1    RS.L 1

cl2_extension1_size RS.B 0

  RSRESET

cl2_begin            RS.B 0

cl2_extension1_entry RS.B cl2_extension1_size*cl2_display_y_size

copperlist2_size     RS.B 0


; ** Konstanten für die größe der Copperlisten **
cl1_size1 EQU 0
cl1_size2 EQU copperlist1_size
cl1_size3 EQU copperlist1_size
cl2_size1 EQU 0
cl2_size2 EQU copperlist2_size
cl2_size3 EQU copperlist2_size


; ** Sprite0-Zusatzstruktur **
  RSRESET

spr0_extension1      RS.B 0

spr0_ext1_header     RS.L 1*(spr_pixel_per_datafetch/16)
spr0_ext1_planedata  RS.L wst_text_character_y_size*(spr_pixel_per_datafetch/16)

spr0_extension1_size RS.B 0

; ** Sprite0-Hauptstruktur **
  RSRESET

spr0_begin            RS.B 0

spr0_extension1_entry RS.B spr0_extension1_size

spr0_end              RS.L 1*(spr_pixel_per_datafetch/16)

sprite0_size          RS.B 0

; ** Sprite1-Zusatzstruktur **
  RSRESET

spr1_extension1      RS.B 0

spr1_ext1_header     RS.L 1*(spr_pixel_per_datafetch/16)
spr1_ext1_planedata  RS.L wst_text_character_y_size*(spr_pixel_per_datafetch/16)

spr1_extension1_size RS.B 0

; ** Sprite1-Hauptstruktur **
  RSRESET

spr1_begin            RS.B 0

spr1_extension1_entry RS.B spr1_extension1_size

spr1_end              RS.L 1*(spr_pixel_per_datafetch/16)

sprite1_size          RS.B 0

; ** Sprite2-Zusatzstruktur **
  RSRESET

spr2_extension1      RS.B 0

spr2_ext1_header     RS.L 1*(spr_pixel_per_datafetch/16)
spr2_ext1_planedata  RS.L wst_text_character_y_size*(spr_pixel_per_datafetch/16)

spr2_extension1_size RS.B 0

; ** Sprite2-Hauptstruktur **
  RSRESET

spr2_begin            RS.B 0

spr2_extension1_entry RS.B spr2_extension1_size

spr2_end              RS.L 1*(spr_pixel_per_datafetch/16)

sprite2_size          RS.B 0

; ** Sprite3-Zusatzstruktur **
  RSRESET

spr3_extension1      RS.B 0

spr3_ext1_header     RS.L 1*(spr_pixel_per_datafetch/16)
spr3_ext1_planedata  RS.L wst_text_character_y_size*(spr_pixel_per_datafetch/16)

spr3_extension1_size RS.B 0

; ** Sprite3-Hauptstruktur **
  RSRESET

spr3_begin            RS.B 0

spr3_extension1_entry RS.B spr3_extension1_size

spr3_end              RS.L 1*(spr_pixel_per_datafetch/16)

sprite3_size          RS.B 0

; ** Sprite4-Zusatzstruktur **
  RSRESET

spr4_extension1      RS.B 0

spr4_ext1_header     RS.L 1*(spr_pixel_per_datafetch/16)
spr4_ext1_planedata  RS.L wst_text_character_y_size*(spr_pixel_per_datafetch/16)

spr4_extension1_size RS.B 0

; ** Sprite4-Hauptstruktur **
  RSRESET

spr4_begin            RS.B 0

spr4_extension1_entry RS.B spr4_extension1_size

spr4_end              RS.L 1*(spr_pixel_per_datafetch/16)

sprite4_size          RS.B 0

; ** Sprite5-Zusatzstruktur **
  RSRESET

spr5_extension1      RS.B 0

spr5_ext1_header     RS.L 1*(spr_pixel_per_datafetch/16)
spr5_ext1_planedata  RS.L wst_text_character_y_size*(spr_pixel_per_datafetch/16)

spr5_extension1_size RS.B 0

; ** Sprite5-Hauptstruktur **
  RSRESET

spr5_begin            RS.B 0

spr5_extension1_entry RS.B spr5_extension1_size

spr5_end              RS.L 1*(spr_pixel_per_datafetch/16)

sprite5_size          RS.B 0

; ** Sprite6-Zusatzstruktur **
  RSRESET

spr6_extension1       RS.B 0

spr6_ext1_header      RS.L 1*(spr_pixel_per_datafetch/16)
spr6_ext1_planedata   RS.L bv_image_y_size*(spr_pixel_per_datafetch/16)

spr6_extension1_size  RS.B 0

; ** Sprite6-Hauptstruktur **
  RSRESET

spr6_begin            RS.B 0

spr6_extension1_entry RS.B spr6_extension1_size

spr6_end              RS.L 1*(spr_pixel_per_datafetch/16)

sprite6_size          RS.B 0

; ** Sprite7-Zusatzstruktur **
  RSRESET

spr7_extension1       RS.B 0

spr7_ext1_header      RS.L 1*(spr_pixel_per_datafetch/16)
spr7_ext1_planedata   RS.L bv_image_y_size*(spr_pixel_per_datafetch/16)

spr7_extension1_size  RS.B 0

; ** Sprite7-Hauptstruktur **
  RSRESET

spr7_begin            RS.B 0

spr7_extension1_entry RS.B spr7_extension1_size

spr7_end              RS.L 1*(spr_pixel_per_datafetch/16)

sprite7_size          RS.B 0


; ** Konstanten für die Größe der Spritestrukturen **
spr0_x_size1 EQU spr_x_size1
spr0_y_size1 EQU sprite0_size/(spr_pixel_per_datafetch/4)
spr1_x_size1 EQU spr_x_size1
spr1_y_size1 EQU sprite1_size/(spr_pixel_per_datafetch/4)
spr2_x_size1 EQU spr_x_size1
spr2_y_size1 EQU sprite2_size/(spr_pixel_per_datafetch/4)
spr3_x_size1 EQU spr_x_size1
spr3_y_size1 EQU sprite3_size/(spr_pixel_per_datafetch/4)
spr4_x_size1 EQU spr_x_size1
spr4_y_size1 EQU sprite4_size/(spr_pixel_per_datafetch/4)
spr5_x_size1 EQU spr_x_size1
spr5_y_size1 EQU sprite5_size/(spr_pixel_per_datafetch/4)
spr6_x_size1 EQU spr_x_size1
spr6_y_size1 EQU sprite6_size/(spr_pixel_per_datafetch/4)
spr7_x_size1 EQU spr_x_size1
spr7_y_size1 EQU sprite7_size/(spr_pixel_per_datafetch/4)

spr0_x_size2 EQU spr_x_size2
spr0_y_size2 EQU sprite0_size/(spr_pixel_per_datafetch/4)
spr1_x_size2 EQU spr_x_size2
spr1_y_size2 EQU sprite1_size/(spr_pixel_per_datafetch/4)
spr2_x_size2 EQU spr_x_size2
spr2_y_size2 EQU sprite2_size/(spr_pixel_per_datafetch/4)
spr3_x_size2 EQU spr_x_size2
spr3_y_size2 EQU sprite3_size/(spr_pixel_per_datafetch/4)
spr4_x_size2 EQU spr_x_size2
spr4_y_size2 EQU sprite4_size/(spr_pixel_per_datafetch/4)
spr5_x_size2 EQU spr_x_size2
spr5_y_size2 EQU sprite5_size/(spr_pixel_per_datafetch/4)
spr6_x_size2 EQU spr_x_size2
spr6_y_size2 EQU sprite6_size/(spr_pixel_per_datafetch/4)
spr7_x_size2 EQU spr_x_size2
spr7_y_size2 EQU sprite7_size/(spr_pixel_per_datafetch/4)


; ** Struktur, die alle Variablenoffsets enthält **
  INCLUDE "variables-offsets.i"

; ** Relative offsets for variables **

save_a7 RS.L 1

; **** PT-Replay ****
  IFD pt_v2.3a
    INCLUDE "music-tracker/pt2-variables-offsets.i"
  ENDC
  IFD pt_v3.0b
    INCLUDE "music-tracker/pt3-variables-offsets.i"
  ENDC

; **** Chunky-Rotation-Zoomer ****
crz_active           RS.W 1
crz_zoomer_active    RS.W 1
crz_z_rotation_angle RS.W 1
crz_zoom_angle       RS.W 1

; **** Wave-Scrolltext ****
wst_image                       RS.L 1
wst_active                      RS.W 1
wst_text_table_start            RS.W 1
wst_y_angle                     RS.W 1
wst_variable_y_angle_speed      RS.W 1
wst_variable_y_angle_step       RS.W 1
wst_variable_horiz_scroll_speed RS.W 1

; **** Blenk-Vectors ****
bv_active                          RS.W 1
bv_x_rotation_angle                RS.W 1
bv_y_rotation_angle                RS.W 1
bv_z_rotation_angle                RS.W 1
bv_variable_x_rotation_angle_speed RS.W 1
bv_variable_y_rotation_angle_speed RS.W 1
bv_variable_z_rotation_angle_speed RS.W 1

bv_sprite_x_coordinate RS.W 1
bv_sprite_y_coordinate RS.W 1
bv_sprite_x_direction  RS.W 1
bv_sprite_y_direction  RS.W 1

bv_wobble_x_radius_angle RS.W 1
bv_wobble_x_angle        RS.W 1

bv_zoom_distance RS.L 1

; **** Keyboard-Handler ****
kh_key_code              RS.B 1
kh_key_flag              RS.B 1

; **** Image-Fader ****
ifi_active      RS.W 1
ifi_fader_angle RS.W 1

ifo_active      RS.W 1
ifo_fader_angle RS.W 1

; **** Blind-Fader ****
bfi_active                     RS.W 1
bfo_active                     RS.W 1
bf_address_offsets_table_start RS.W 1

; **** Cube-Zoomer ****
czi_active     RS.W 1
czi_zoom_angle RS.W 1

czo_active     RS.W 1
czo_zoom_angle RS.W 1


variables_size RS.B 0


; **** PT-Replay ****
; ** PT-Song-Structure **
  INCLUDE "music-tracker/pt-song-structure.i"

; ** Temporary channel structure **
  INCLUDE "music-tracker/pt-temp-channel-structure.i"

; **** Blenk-Vectors ****
; ** Objekt-Info-Struktur **
  RSRESET

bv_object_info              RS.B 0

bv_object_info_edge_table   RS.L 1
bv_object_info_face_color   RS.W 1
bv_object_info_lines_number RS.W 1

bv_object_info_size         RS.B 0


; ## Makrobefehle ##
  INCLUDE "macros.i"


  INCLUDE "sys-wrapper.i"

; ** Eigene Variablen initialisieren **
  CNOP 0,4
init_own_variables

; **** PT-Replay ****
  IFD pt_v2.3a
    PT2_INIT_VARIABLES
  ENDC
  IFD pt_v3.0b
    PT3_INIT_VARIABLES
  ENDC

; **** Chunky-Rotation-Zoomer ****
  moveq   #FALSE,d1
  move.w  d1,crz_active(a3)
  move.w  d1,crz_zoomer_active(a3)
  moveq   #0,d0
  move.w  d0,crz_z_rotation_angle(a3)
  move.w  #(sine_table_length/4)*3,crz_zoom_angle(a3)

; **** Wave-Scrolltext ****
  moveq   #FALSE,d1
  move.w  d1,wst_active(a3)
  lea     wst_image_data,a0
  move.l  a0,wst_image(a3)
  move.w  d0,wst_text_table_start(a3)
  move.w  d0,wst_y_angle(a3)
  moveq   #wst_y_angle_speed,d2
  move.w  d2,wst_variable_y_angle_speed(a3)
  moveq   #wst_y_angle_step,d2
  move.w  d2,wst_variable_y_angle_step(a3)
  moveq   #wst_horiz_scroll_speed,d2
  move.w  d2,wst_variable_horiz_scroll_speed(a3)

; **** Blenk-Vectors ****
  move.w  d1,bv_active(a3)
  move.w  d0,bv_x_rotation_angle(a3)
  move.w  d0,bv_y_rotation_angle(a3)
  move.w  d0,bv_z_rotation_angle(a3)
  moveq   #bv_x_rotation_angle_speed1,d2
  move.w  d2,bv_variable_x_rotation_angle_speed(a3)
  moveq   #bv_y_rotation_angle_speed1,d2
  move.w  d2,bv_variable_y_rotation_angle_speed(a3)
  moveq   #bv_z_rotation_angle_speed1,d2
  move.w  d2,bv_variable_z_rotation_angle_speed(a3)

  move.w  d0,bv_sprite_x_coordinate(a3)
  move.w  d0,bv_sprite_y_coordinate(a3)
  moveq   #bv_sprite_x_direction_speed,d2
  move.w  d2,bv_sprite_x_direction(a3)
  moveq   #bv_sprite_y_direction_speed,d2
  move.w  d2,bv_sprite_y_direction(a3)

  move.w  #sine_table_length/4,bv_wobble_x_radius_angle(a3)
  move.w  d0,bv_wobble_x_angle(a3)

  move.l  #czi_zoom_radius,bv_zoom_distance(a3)

; **** Keyboard-Handler ****
  move.b  d0,kh_key_code(a3)
  move.b  d0,kh_key_flag(a3)

; **** Image-Fader ****
  move.w  d1,ifi_active(a3)
  move.w  #sine_table_length/4,ifi_fader_angle(a3)

  move.w  d1,ifo_active(a3)
  move.w  #sine_table_length/4,ifo_fader_angle(a3)

; **** Blind-Fader ****
  move.w  d1,bfi_active(a3)
  move.w  d1,bfo_active(a3)
  move.w  d0,bf_address_offsets_table_start(a3)

; **** Cube-Zoomer ****
  move.w  d1,czi_active(a3)
  move.w  d0,czi_zoom_angle(a3)

  move.w  d1,czo_active(a3)
  move.w  #sine_table_length/4,czo_zoom_angle(a3)
  rts

; ** Alle Initialisierungsroutinen ausführen **
  CNOP 0,4
init_all
  bsr.s   pt_DetectSysFrequ
  bsr.s   init_CIA_timers
  bsr     init_sprites
  bsr     init_color_registers
  bsr     pt_InitRegisters
  bsr     pt_InitAudTempStrucs
  bsr     pt_ExamineSongStruc
  IFEQ pt_finetune_enabled
    bsr     pt_InitFtuPeriodTableStarts
  ENDC
  bsr     crz_convert_image_data
  bsr     wst_init_characters_offsets
  bsr     wst_init_characters_x_positions
  bsr     bv_convert_RGB8_to_RGB4
  bsr     bv_init_object1_info_table
  bsr     bg_copy_image_to_bitplane
  bsr     init_first_copperlist
  bsr     copy_first_copperlist
  bsr     cl1_set_branches_pointers
  bsr     init_second_copperlist
  bra     copy_second_copperlist

; **** PT-Replay ****
; ** Detect system frequency NTSC/PAL **
  PT_DETECT_SYS_FREQUENCY

; ** CIA-Timer initialisieren **
  CNOP 0,4
init_CIA_timers
  moveq   #ciaa_ta_time&$ff,d0
  move.b  d0,CIATALO(a4)     ;CIA-A-Timer-A Low-Bits
  moveq   #ciaa_ta_time>>8,d0
  move.b  d0,CIATAHI(a4)     ;CIA-A-Timer-A High-Bits
  moveq   #ciaa_cra_bits,d0
  move.b  d0,CIACRA(a4)

  PT_INIT_TIMERS
  rts

; ** Sprites initialisieren **
  CNOP 0,4
init_sprites
  bsr.s   spr_init_pointers_table
  bra     spr_copy_structures

; ** Tabelle mit Zeigern auf Sprites initialisieren **
; ----------------------------------------------------
  COP_INIT_SPRITE_POINTERS_TABLE

; ** Spritedaten kopieren **
  COPY_SPRITE_STRUCTURES

; ** Farbregister initialisieren **
  CNOP 0,4
init_color_registers
  rts

; **** PT-Replay ****
; ** Audioregister initialisieren **
   PT_INIT_REGISTERS

; ** Temporäre Audio-Kanal-Struktur initialisieren **
   PT_INIT_AUDIO_TEMP_STRUCTURES

; ** Höchstes Pattern ermitteln und Tabelle mit Zeigern auf Samples initialisieren **

   PT_EXAMINE_SONG_STRUCTURE

  IFEQ pt_finetune_enabled
; ** FineTuning-Offset-Tabelle initialisieren **
    PT_INIT_FINETUNING_PERIOD_TABLE_STARTS
  ENDC

; **** Chunky-Rotation-Zoomer ****
; ** Playfielddaten in Switchwerte umwandeln **
  CONVERT_IMAGE_TO_BPLCON4_CHUNKY crz

; **** Wave-Scrolltext ****
; ** Offsets der Buchstaben im Characters-image berechnen **
; ------------------------------------------ --------------
  INIT_CHARACTERS_OFFSETS.W wst

; ** X-Positionen der Chars berechnen **
  INIT_CHARACTERS_X_POSITIONS wst,SHIRES

; ** RGB8-Farbwerte in RGB4 Hi/Lo-Werte umwandeln **
  CNOP 0,4
bv_convert_RGB8_to_RGB4
  lea     bv_color_table(pc),a0 ;Zeiger auf Farbtabelle
  move.w  #$0f0f,d3
  move.w  #segments_number1-1,d7 ;Anzahl der Segemente
bv_convert_RGB8_to_RGB4_loop1
  move.w  #color_values_number1-1,d6 ;Anzahl der Einträge in der Zieltabelle
bv_convert_RGB8_to_RGB4_loop2
  move.l  (a0),d0            ;Farbwert aus Tabelle lesen
  move.l  d0,d2              
  RGB8_TO_RGB4_HIGH d0,d1,d3
  move.w  d0,(a0)+           ;High-Bits
  RGB8_TO_RGB4_LOW d2,d1,d3
  move.w  d2,(a0)+           ;Low-Bits
  dbf     d6,bv_convert_RGB8_to_RGB4_loop2
  dbf     d7,bv_convert_RGB8_to_RGB4_loop1
  rts

; ** Object-Info-Tabelle initialisieren **
  CNOP 0,4
bv_init_object1_info_table
  lea     bv_object1_info_table+bv_object_info_edge_table(pc),a0 ;Zeiger auf Object-Info-Tabelle
  lea     bv_object1_edge_table(pc),a1 ;Zeiger auf Tebelle mit Eckpunkten
  move.w  #bv_object_info_size,a2
  moveq   #bv_object1_faces_number-1,d7 ;Anzahl der Flächen
bv_init_object1_info_table_loop
  move.w  bv_object_info_lines_number(a0),d0
  addq.w  #2,d0              ;Anzahl der Linien + 1 = Anzahl der Eckpunkte
  move.l  a1,(a0)            ;Zeiger auf Tabelle mit Eckpunkten eintragen
  lea     (a1,d0.w*2),a1     ;Zeiger auf Eckpunkte-Tabelle erhöhen
  add.l   a2,a0              ;Object-Info-Struktur der nächsten Fläche
  dbf     d7,bv_init_object1_info_table_loop
  rts

; ** Objekt ins Playfield kopieren **
  COPY_IMAGE_TO_BITPLANE bg,0,50


; ** 1. Copperliste initialisieren **
  CNOP 0,4
init_first_copperlist
  move.l  cl1_construction2(a3),a0 ;CL
  bsr.s   cl1_init_playfield_registers
  bsr.s   cl1_init_sprite_pointers
  bsr.s   cl1_init_color_registers
  bsr     cl1_init_bitplane_pointers
  bsr     cl1_init_branches_pointers
  bsr     cl1_init_copper_interrupt
  COP_LISTEND
  bsr     cl1_set_sprite_pointers
  bra     cl1_set_bitplane_pointers

  COP_INIT_PLAYFIELD_REGISTERS cl1
  COP_INIT_SPRITE_POINTERS cl1

  CNOP 0,4
cl1_init_color_registers
  COP_INIT_COLOR_HIGH COLOR00,32,pf1_color_table
  COP_SELECT_COLOR_HIGH_BANK 1
  COP_INIT_COLOR_HIGH COLOR00,32
  COP_SELECT_COLOR_HIGH_BANK 2
  COP_INIT_COLOR_HIGH COLOR00,32
  COP_SELECT_COLOR_HIGH_BANK 3
  COP_INIT_COLOR_HIGH COLOR00,32
  COP_SELECT_COLOR_HIGH_BANK 4
  COP_INIT_COLOR_HIGH COLOR00,16,spr_color_table

  COP_SELECT_COLOR_LOW_BANK 0
  COP_INIT_COLOR_LOW COLOR00,32,pf1_color_table
  COP_SELECT_COLOR_LOW_BANK 1
  COP_INIT_COLOR_LOW COLOR00,32
  COP_SELECT_COLOR_LOW_BANK 2
  COP_INIT_COLOR_LOW COLOR00,32
  COP_SELECT_COLOR_LOW_BANK 3
  COP_INIT_COLOR_LOW COLOR00,32
  COP_SELECT_COLOR_LOW_BANK 4
  COP_INIT_COLOR_LOW COLOR00,16,spr_color_table
  rts

  COP_INIT_BITPLANE_POINTERS cl1

  CNOP 0,4
cl1_init_branches_pointers
  move.l  #(((cl1_vstart1<<24)+(((cl1_hstart1/4)*2)<<16))|$10000)|$fffe,d0 ;WAIT-Befehl
  moveq   #2,d1              ;X-Verschiebung $00020000
  swap    d1
  moveq   #1,d2
  ror.l   #8,d2              ;Y-Additionswert $01000000
  moveq   #cl2_display_y_size-1,d7 ;Anzahl der Zeilen
cl1_init_branches_pointers_loop1
  move.w  #COP2LCH,(a0)
  addq.w  #4,a0
  move.w  #COP2LCL,(a0)
  addq.w  #4,a0
  moveq   #crz_display_y_scale_factor-1,d6 ;Anzahl der Abschnitte für Y-Skalierung
cl1_init_branches_pointers_loop2
  move.l  d0,(a0)+           ;WAIT x,y
  move.w  #SPR6POS,(a0)
  addq.w  #4,a0
  move.w  #SPR7POS,(a0)
  addq.w  #4,a0
  move.w  #COP1LCH,(a0)
  addq.w  #4,a0
  move.w  #COP1LCL,(a0)
  addq.w  #4,a0
  eor.l   d1,d0              ;X-Shift
  add.l   d2,d0              ;nächste Zeile
  COP_MOVEQ TRUE,COPJMP2
  dbf     d6,cl1_init_branches_pointers_loop2
  dbf     d7,cl1_init_branches_pointers_loop1
  rts

  COP_INIT_COPINT cl1,cl1_hstart2,cl1_vstart2

  COP_SET_SPRITE_POINTERS cl1,construction2,spr_number

  COP_SET_BITPLANE_POINTERS cl1,construction2,pf1_depth3

  COPY_COPPERLIST cl1,2

  CNOP 0,4
cl1_set_branches_pointers
  move.l  cl1_construction2(a3),a0 1
  moveq   #cl1_subextension1_size,d2
  move.l  cl2_construction2(a3),d0 ;Einsprungadresse = Aufbau-CL2
  MOVEF.L cl2_extension1_size,d3
  moveq   #cl1_extension1_size,d4
  bsr.s   cl1_set_jump_entry_pointers
  move.l  cl1_display(a3),a0 ;Darstellen-CL1
  move.l  cl2_display(a3),d0 ;Einsprungadresse = Darstellen-CL2

; ** Routine set-jump-entry_pointers **
; a0 ... Copperliste1
; d0 ... Einsprungadresse Copperliste2
; d2 ... cl1_subextension1_size
; d3 ... cl2_extension1_size
; d4 ... cl1_extension1_size
cl1_set_jump_entry_pointers
  MOVEF.L cl1_extension1_entry+cl1_ext1_subextension1_entry+cl1_subextension1_size,d1 ;Offset Rücksprungadresse CL1
  add.l   a0,d1              ;+ Rücksprungadresse CL1
  lea     cl1_extension1_entry+cl1_ext1_subextension1_entry+cl1_subext1_COP1LCH+2(a0),a1
  ADDF.W  cl1_extension1_entry+cl1_ext1_COP2LCH+2,a0
  moveq   #cl2_display_y_size-1,d7 ;Anzahl der Zeilen
cl1_set_branches_loop1
  swap    d0                 ;High
  move.w  d0,(a0)            ;COP2LCH
  swap    d0                 ;Low
  move.w  d0,4(a0)           ;COP2LCL
  moveq   #crz_display_y_scale_factor-1,d6 ;Anzahl der Abschnitte für Y-Skalierung
cl1_set_branches_loop2
  swap    d1                 ;High-Wert
  move.w  d1,(a1)            ;COP1LCH
  swap    d1                 ;Low-Wert
  move.w  d1,4(a1)           ;COP1LCL
  add.l   d2,d1              ;Rücksprungadresse CL1 erhöhen
  add.l   d2,a1              ;nächste Zeile in Unterabschnitt der CL1
  dbf     d6,cl1_set_branches_loop2
  add.l   d3,d0              ;Einsprungadresse CL2 erhöhen
  add.l   d4,a0              ;nächste Zeile in CL1
  addq.l  #8,d1              ;CMOVE COP2LCH + CMOVE COP2LCL überspringen
  addq.w  #8,a1              ;CMOVE COP2LCH + CMOVE COP2LCL überspringen
  dbf     d7,cl1_set_branches_loop1
  rts

; ** 2. Copperliste initialisieren **
  CNOP 0,4
init_second_copperlist
  move.l  cl2_construction2(a3),a0 

cl2_init_bplcon4_registers
  move.l  #(BPLCON4<<16)+bplcon4_bits,d0
  IFEQ open_border_enabled 
    move.w  #BPL1DAT,d1
  ENDC
  moveq   #cl2_display_y_size-1,d7
cl2_init_bplcon4_registers_loop1
  IFEQ open_border_enabled 
    move.w  d1,(a0)
    addq.w  #4,a0
  ENDC
  moveq   #cl2_display_width-1,d6 ;Anzahl der Spalten
cl2_init_bplcon4_registers_loop2
  move.l  d0,(a0)+           ;BPLCON4
  dbf     d6,cl2_init_bplcon4_registers_loop2
  COP_MOVEQ TRUE,COPJMP1
  dbf     d7,cl2_init_bplcon4_registers_loop1
  rts

  COPY_COPPERLIST cl2,2


; ## Hauptprogramm ##
; a3 ... Basisadresse aller Variablen
; a4 ... CIA-A-Base
; a5 ... CIA-B-Base
; a6 ... DMACONR
  CNOP 0,4
main_routine
  bsr.s   no_sync_routines
  bra.s   beam_routines


; ## Routinen, die nicht mit der Bildwiederholfrequenz gekoppelt sind ##
  CNOP 0,4
no_sync_routines
  rts


; ## Rasterstahl-Routinen ##
  CNOP 0,4
beam_routines
  bsr     wait_copint
  bsr.s   swap_first_copperlist
  bsr.s   swap_second_copperlist
  bsr.s   spr_swap_structures
  bsr     swap_images
  bsr     wave_scrolltext
  bsr     bfi_blind_fader_in
  bsr     bfo_blind_fader_out
  bsr     bv_draw_lines
  bsr     bv_fill_image
  bsr     chunky_rotation_zoomer
  bsr     bv_clear_image
  bsr     bv_rotation
  bsr     bv_move_sprites
  bsr     bv_wobble_sprites
  bsr     bv_copy_image
  bsr     keyboard_handler
  bsr     image_fader_in
  bsr     image_fader_out
  bsr     copy_color_table
  bsr     cube_zoomer_in
  bsr     cube_zoomer_out
  btst    #CIAB_GAMEPORT0,CIAPRA(a4) ;Auf linke Maustaste warten
  bne.s   beam_routines
  rts

; ** Copperlisten vertauschen **
  SWAP_COPPERLIST cl1,2

  SWAP_COPPERLIST cl2,2,NOSET

; ** Sprite-Strukturen vertauschen **
  SWAP_SPRITES_STRUCTURES spr,spr_swap_number,6

; ** Images vertauschen **
  CNOP 0,4
swap_images
  move.l  extra_pf1(a3),a0
  move.l  extra_pf3(a3),extra_pf1(a3)
  move.l  extra_pf2(a3),a1
  move.l  a0,extra_pf2(a3)
  move.l  a1,extra_pf3(a3)
  rts

; ** Laufschrift **
  CNOP 0,4
wave_scrolltext
  tst.w   wst_active(a3)     ;Wave-Scrolltext an ?
  bne     no_wave_scrolltext ;Nein -> verzweige
  movem.l a4-a6,-(a7)
  lea     wst_characters_x_positions(pc),a2 ;X-Positionen der Chars
  lea     spr_pointers_display(pc),a4 ;Zeiger auf Sprites
  lea     sine_table(pc),a5  ;Zeiger auf Sinustabelle
  move.w  wst_y_angle(a3),d4  ;Y-Winkel
  move.w  d4,d0              
  add.w   wst_variable_y_angle_speed(a3),d0 ;nächster Y-Winkel
  move.w  wst_variable_horiz_scroll_speed(a3),a6
  and.w   #sine_table_length-1,d0 ;Überlauf entfernen
  move.w  d0,wst_y_angle(a3) 
  moveq   #wst_image_plane_width-4,d3
  moveq   #wst_text_characters_number-1,d7 ;Anzahl der Chars
wave_scrolltext_loop1
  move.l  (a4)+,a1           ;Zeiger auf Sprite-Struktur
  move.w  (a2),d5            ;X-Position
  move.w  d5,d0              
  move.l  (a5,d4.w*4),d1     ;sin(w)
  MULUF.L wst_y_radius*2,d1,d2 ;y'=(yr*sin(w))/2^15
  add.w   #(display_window_HSTART-wst_text_character_x_size)*4,d0 ;X-Zentrierung
  swap    d1
  sub.w   wst_variable_y_angle_step(a3),d4 ;nächster Buchstabe
  add.w   #wst_y_centre,d1  ;Y-Zentrierung
  moveq   #wst_text_character_y_size,d2 ;Höhe
  add.w   d1,d2              ;Höhe zu Y-Position addieren
  SET_SPRITE_POSITION d0,d1,d2
  move.w  d1,(a1)            ;SPRxPOS
  and.w   #sine_table_length-1,d4 ;Überlauf entfernen
  move.w  d2,spr_pixel_per_datafetch/8(a1) ;SPRxCTL
  sub.w   a6,d5              ;X-Position reduzieren
  bpl.s   wst_no_new_character_image ;Wenn positiv -> verzweige
  add.w   #wst_text_character_x_restart,d5 ;X-Pos zurücksetzen
  bsr.s   wst_get_new_character_image
  move.l  d0,a0              ;Neues Bild für Character
  ADDF.W  (spr_pixel_per_datafetch/8)*2,a1 ;Sprite-Header überpsringen
  moveq   #wst_text_character_y_size-1,d6 ;Anzahl der Zeilen zum kopieren
wave_scrolltext_loop2
  move.l  (a0)+,(a1)+        ;64 Pixel BP0
  move.l  (a0),(a1)+
  add.l   d3,a0              ;nächste Zeile in Quelle
  move.l  (a0)+,(a1)+        ;64 Pixel BP1
  move.l  (a0),(a1)+
  add.l   d3,a0              ;nächste Zeile in Quelle
  dbf     d6,wave_scrolltext_loop2
wst_no_new_character_image
  move.w  d5,(a2)+           ;X-Position retten
  dbf     d7,wave_scrolltext_loop1
  movem.l (a7)+,a4-a6
no_wave_scrolltext
  rts

; ** Neues Image für Character ermitteln **
  GET_NEW_CHARACTER_IMAGE.W wst,wst_check_control_codes

  CNOP 0,4
wst_check_control_codes
  cmp.b   #"°",d0            ;Standart-Scroll ?
  beq.s   wst_set_standard_scroll ;Ja -> verzweige
  cmp.b   #"¹",d0            ;Y-Winkel zurücksetzen?
  beq.s   wst_clear_y_angle_step
  cmp.b   #"²",d0            ;Y-Step setzen ?
  beq.s   wst_set_y_angle_step
  cmp.b   #"³",d0            ;Y-Winkel setzen ?
  beq.s   wst_set_y_angle_speed
  cmp.b   #"",d0
  beq.s   wst_set_horiz_scroll_speed_slow
  cmp.b   #"
",d0
  beq.s   wst_set_horiz_scroll_speed_medium
  cmp.b   #"",d0
  beq.s   wst_set_horiz_scroll_speed_fast
  cmp.b   #"",d0
  beq.s   wst_stop_horiz_scrolltext
  rts
  CNOP 0,4
wst_set_standard_scroll
  move.w  #sine_table_length/2,wst_y_angle(a3) ;Y-Winkel = 180°
  moveq   #0,d0          ;Rückgabewert TRUE = Steuerungscode gefunden
  move.w  d0,wst_variable_y_angle_speed(a3) ;Y-Winkel-Geschwindigkeit = Null
  rts
  CNOP 0,4
wst_clear_y_angle_step
  moveq   #0,d0          ;Rückgabewert TRUE = Steuerungscode gefunden
  move.w  d0,wst_variable_y_angle_step(a3) ;Y-Winkel-Schrittweite = Null
  rts
  CNOP 0,4
wst_set_y_angle_step
  moveq   #wst_y_angle_step,d0
  move.w  d0,wst_variable_y_angle_step(a3) ;Y-Winkel-Schrittweite setzen
  moveq   #0,d0          ;Rückgabewert TRUE = Steuerungscode gefunden
  rts
  CNOP 0,4
wst_set_y_angle_speed
  moveq   #wst_y_angle_speed,d0
  move.w  d0,wst_variable_y_angle_speed(a3) ;Y-Winkel-Geschwindigkeit setzen
  moveq   #0,d0          ;Rückgabewert TRUE = Steuerungscode gefunden
  rts
  CNOP 0,4
wst_set_horiz_scroll_speed_slow
  moveq   #wst_horiz_scroll_speed_slow,d2
  move.w  d2,wst_variable_horiz_scroll_speed(a3)
  moveq   #0,d0          ;Rückgabewert TRUE = Steuerungscode gefunden
  rts
  CNOP 0,4
wst_set_horiz_scroll_speed_medium
  moveq   #wst_horiz_scroll_speed,d2
  move.w  d2,wst_variable_horiz_scroll_speed(a3)
  moveq   #0,d0          ;Rückgabewert TRUE = Steuerungscode gefunden
  rts
  CNOP 0,4
wst_set_horiz_scroll_speed_fast
  moveq   #wst_horiz_scroll_speed_fast,d2
  move.w  d2,wst_variable_horiz_scroll_speed(a3)
  moveq   #0,d0          ;Rückgabewert TRUE = Steuerungscode gefunden
  rts
  CNOP 0,4
wst_stop_horiz_scrolltext
  not.w   wst_active(a3)
  moveq   #0,d0          ;Rückgabewert TRUE = Steuerungscode gefunden
  rts

; ** Playfield rotieren/zoomen **
  CNOP 0,4
chunky_rotation_zoomer
  tst.w   crz_active(a3)
  bne     no_chunky_rotation_zoomer
  movem.l a3-a6,-(a7)
  lea     sine_table(pc),a0  
  move.w  crz_z_rotation_angle(a3),d4 ;Rotations-Winkel 
  move.w  d4,d3              ;Rotations-Winkel retten
  move.w  crz_zoom_angle(a3),d5 ;Zoom-Winkel 
  IFNE crz_table_length_256
    MOVEF.W sine_table_length-1,d6 ;Überlauf
  ENDC
  move.w  2(a0,d4.w*4),d1     ;sin(w)
  IFEQ crz_table_length_256
    add.b   #sine_table_length/4,d4 ;+ 90 Grad
  ELSE
    add.w   #sine_table_length/4,d4 ;+ 90 Grad
  ENDC
  move.w  2(a0,d5.w*4),d2     ;sin(w) für Zoom
  IFEQ crz_table_length_256
    addq.b  #crz_z_rotation_angle_speed,d3 ;nächster Rotations-Winkel
  ELSE
    and.w   d6,d4            ;Überlauf entfernen
    addq.w  #crz_z_rotation_angle_speed,d3 ;nächster Rotations-Winkel
  ENDC
  move.w  2(a0,d4.w*4),d0     ;cos(w)
  IFEQ crz_table_length_256
    tst.w   crz_zoomer_active(a3) ;Zoomer an?
    bne.s   crz_no_zoomer     ;Nein -> verzweige
    addq.b  #crz_zoom_angle_speed,d5 ;nächster Zoom-Winkel
crz_no_zoomer
  ELSE
    tst.w   crz_zoomer_active(a3) ;Zoomer an?
    bne.s   crz_no_zoomer    ;Nein -> verzweige
    addq.w  #crz_zoom_angle_speed,d5 ;nächster Zoom-Winkel
    and.w   d6,d5            ;Überlauf entfernen
crz_no_zoomer
    and.w   d6,d3            ;Überlauf entfernen
  ENDC

; ** Zoomfaktor berechnen **
  ;MULSF.W crz_zoom_radius*2,d2,d6 ;zoom=(zoomr*sin(w))/2^15
  ;swap    d2
  asr.w   #5,d2              ;zoom'=(zoomr*sin(w))/2^15
  move.w  d3,crz_z_rotation_angle(a3) ;Rotations-Winkel retten
  add.w   #crz_zoom_centre,d2 ;+ Zoom-Mittelpunkt
  move.w  d5,crz_zoom_angle(a3) ;Zoom-Winkel retten
  muls.w  d2,d0              ;x'=(zoom'*cos(w))/2^15
  muls.w  d2,d1              ;y'=(zoom'*sin(w))/2^15
  swap    d0
  swap    d1

; ** Rotation um die Z-Achse **
  moveq   #crz_Ax,d2         ;X links oben
  muls.w  d0,d2              ;Ax*cos(w)
  moveq   #crz_Ay,d3         ;Y links oben
  muls.w  d1,d3              ;Ay*sin(w)
  lea     crz_switch_table(pc),a0 ;Zeiger auf Tabelle mit Switchwerten
  add.l   d3,d2              ;Ax'=Ax*cos(w)+Ay*sin(w)
  moveq   #crz_Bx,d3         ;X rechts oben
  muls.w  d1,d3              ;Bx*sin(w)
  moveq   #crz_By,d4         ;Y rechts oben
  muls.w  d0,d4              ;By*cos(w)
  add.w   #crz_z_rotation_x_centre<<8,d2 ;x' + X-Mittelpunkt
  add.l   d4,d3              ;By'=Bx*sin(w)+By*cos(w)

; ** Translation **
  move.w  d2,a5              ;X-Mittelpunkt retten
  add.w   #crz_z_rotation_y_centre<<8,d3 ;y' + Y-Mittelpunkt
  move.l  cl2_construction2(a3),a1
  move.w  d3,a4              ;Y-Mittelpunkt retten

; ** Farbwerte in Copperliste kopieren **
  move.l  a7,save_a7(a3)     
  move.w  #cl2_extension1_size,a2
  move.w  d0,a3              ;cos(w) retten
  move.w  d1,a7              ;sin(w)
  add.w   a3,a3              ;*2 ist notwendig, um die 2:1 Pixelverzerrung auszugleichen
  ADDF.W  cl2_extension1_entry+cl2_ext1_BPLCON4_1+2,a1 ;CL
  move.w  #(cl2_extension1_size*cl2_display_y_size)-4,a6
  add.w   a7,a7              ;*2 ist notwendig, um die 2:1 Pixelverzerrung auszugleichen
  moveq   #TRUE,d2           ;Langwortzugriff
  moveq   #cl2_display_width-1,d7 ;Anzahl der Spalten
chunky_rotation_zoomer_loop1
  move.w  a5,d4              ;X Linke obere Ecke in Playfield
  move.w  a4,d5              ;Y Linke obere Ecke in Playfield
  moveq   #cl2_display_y_size-1,d6 ;Anzahl der Zeilen
chunky_rotation_zoomer_loop2
  move.w  d4,d3              ;X-Pos in Playfield 
  move.w  d5,d2              ;Y-Pos in Playfield 
  lsr.w   #8,d3              ;Bits in richtige Postion bringen
  add.w   d1,d4              ;nächste Pixel-Spalte in Playfield
  move.b  d3,d2              ;Bits 15-8 = Y-Offset, Bits 7-0 = X-Offset
  add.w   d0,d5              ;nächste Pixel-Zeile in Playfield
  move.b  (a0,d2.l),(a1)     ;Switchwert setzen
  add.l   a2,a1              ;nächste Zeile in CL
  dbf     d6,chunky_rotation_zoomer_loop2
  sub.w   a7,a4              ;nächste Y-Pos in Playfield
  add.w   a3,a5              ;nächste X-Pos in Playfield
  sub.l   a6,a1              ;nächste Spalte in CL
  dbf     d7,chunky_rotation_zoomer_loop1
  move.l  variables+save_a7(pc),a7 ;Alter Stackpointer
  movem.l (a7)+,a3-a6
no_chunky_rotation_zoomer
  rts

; ** Sprites bewegen **
  CNOP 0,4
bv_move_sprites
  movem.l a3-a6,-(a7)
  lea     spr_pointers_construction+(6*4)(pc),a1 ;Zeiger auf Sprites
  move.w  #bv_sprite_x_max,a2
  move.w  #bv_sprite_y_max,a4
  move.w  bv_sprite_x_coordinate(a3),d3 ;X-Koord
  move.w  #bv_sprite_x_centre,a5
  move.w  bv_sprite_y_coordinate(a3),d4 ;Y-Koord
  moveq   #bv_sprite_y_centre,d6
  move.w  bv_sprite_x_direction(a3),d5 ;X-Richtung
  add.w   d5,d3              ;X-Pos. erhöhen/verringern
bv_check_x_min
  IFNE bv_sprite_x_min
    cmp.w   #bv_sprite_x_min,d3 ;X >= X-Min ?
  ENDC
  bge.s   bv_check_x_max     ;Ja  -> verzweige
  moveq   #bv_sprite_x_min,d3 ;X zurücksetzen
  neg.w   d5                 ;X-Richtung umkehren
bv_check_x_max
  cmp.w   a2,d3              ;X < X-Max ?
  blt.s   bv_set_x_movement_values ;Ja -> verzweige
  move.w  a2,d3              ;X zurücksetzen
  neg.w   d5                 ;X-Richtung umkehren
bv_set_x_movement_values
  move.w  d3,bv_sprite_x_coordinate(a3) ;X-Pos. retten
  add.w   a5,d3              ;+ X-Mittelpunkt
  move.w  d5,bv_sprite_x_direction(a3) ;X-Richtung retten

  move.w  bv_sprite_y_direction(a3),d5 ;Y-Richtung
  add.w   d5,d4              ;Y-Pos. erhöhen/verringern
bv_check_y_min
  IFNE bv_sprite_y_min
    cmp.w   #bv_sprite_y_min,d4 ;Y >= Y-Min ?
  ENDC
  bge.s   bv_check_y_max     ;Ja -> verzweige
  moveq   #bv_sprite_y_min,d4 ;Y zurücksetzen
  neg.w   d5                 ;Y-Richtung ändern
bv_check_y_max
  cmp.w   a4,d4              ;Y < Y-Max ?
  blt.s   bv_set_y_movement_values ;Ja -> verzweige
  move.w  a4,d4              ;Y zurücksetzen
  neg.w   d5                 ;Y-Richtung ändern
bv_set_y_movement_values
  move.w  d4,bv_sprite_y_coordinate(a3) ;Y-Position retten
  add.w   d6,d4              ;+ Y-Mittelpunkt
  move.w  d5,bv_sprite_y_direction(a3) ;Y-Richtung retten

bv_set_sprites_positions
  move.w  #spr_x_size2*4,a2  ;X-Offset nächstes Sprite
  moveq   #bv_used_sprites_number-1,d7 ;Anzahl der Objekte
bv_move_sprites_loop
  move.l  (a1)+,a0           ;Sprite-Struktur
  move.w  d3,d0              ;X-Pos. 
  move.w  d4,d1              ;Y-Pos. 
  MOVEF.W bv_image_y_size,d2 ;Höhe
  add.w   d1,d2              ;Höhe zu Y addieren
  SET_SPRITE_POSITION d0,d1,d2
  move.w  d1,(a0)            ;SPRxPOS
  add.w   a2,d3              ;X-Position des nächsten Sprites
  move.w  d2,spr_pixel_per_datafetch/8(a0) ;SPRxCTL
  dbf     d7,bv_move_sprites_loop
  movem.l (a7)+,a3-a6
  rts

; ** Linien ziehen **
  CNOP 0,4
bv_draw_lines
  tst.w   bv_active(a3)
  bne     bv_no_draw_lines
  movem.l a3-a5,-(a7)
  bsr     bv_init_line_blit
  lea     bv_object1_info_table(pc),a0 ;Zeiger auf Info-Daten zum Objekt
  move.l  a7,save_a7(a3)     ;Alten Stackpointer retten
  lea     bv_xyz_rotation_coordinates(pc),a1 ;Zeiger auf XYZ-Koordinaten
  move.l  extra_pf2(a3),a2   ;Plane0
  move.l  cl1_construction2(a3),a4 ;CL
  ADDF.W  cl1_COLOR12_high5+2,a4 ;Farbregister
  move.l  (a2),a2
  move.l  #((BC0F_SRCA+BC0F_SRCC+BC0F_DEST+NANBC+NABC+ABNC)<<16)+(BLTCON1F_LINE+BLTCON1F_SING),a3
  lea     bv_color_table(pc),a7 ;Zeiger auf Tabelle mit Farbverlaufwerten
  moveq   #bv_object1_faces_number-1,d7 ;Anzahl der Flächen
bv_draw_lines_loop1

; ** Z-Koordinate des Vektors N durch das Kreuzprodukt u x v berechnen **
  move.l  (a0)+,a5           ;Zeiger auf Startwerte der Punkte
  swap    d7                 ;Flächenzähler retten
  move.w  (a5),d4            ;P1-Startwert
  move.w  2(a5),d5           ;P2-Startwert
  move.w  4(a5),d6           ;P3-Startwert
  movem.w (a1,d5.w*2),d0-d1  ;xp2,yp2-Koords
  movem.w (a1,d6.w*2),d2-d3  ;xp3,yp3-Koords
  sub.w   d0,d2              ;xv=xp3-xp2
  sub.w   (a1,d4.w*2),d0     ;xu=xp2-xp1
  sub.w   d1,d3              ;yv=yp3-yp2
  sub.w   2(a1,d4.w*2),d1    ;yu=yp2-yp1
  muls.w  d3,d0              ;xu*yv
  muls.w  d2,d1              ;yu*xv
  sub.l   d0,d1              ;zn=(yu*xv)-(xu*yv)
  bpl     bv_no_face_visible ;Wenn zn positiv -> verzweige

; ** Mittlere Z-Koordinate der Fläche berechnen **
bv_face_visible
  move.w  6(a5),d7           ;P4-Startwert 
  move.w  4(a1,d4.w*2),d0    ;zm=zp1+zp2+zp3+zp4
  add.w   4(a1,d5.w*2),d0
  add.w   4(a1,d6.w*2),d0
  move.l  #bv_kdRGB*bv_EpRGB,d1 ;(kdRGB*EpRGB)
  add.w   4(a1,d7.w*2),d0
  IFEQ bv_object1_edge_points_per_face-4
    asr.w   #2,d0            ;zm / Anzahl der Eckpunkte
  ELSE
    ext.l   d0               ;Auf 32 Bit erweitern
    divs.w  #bv_object1_edge_points_per_face,d0 ;zm / Anzahl der Eckpunkte
  ENDC

; ** Entfernung zur Lichtquelle berechnen **
  move.w  (a0),d7            ;Farbnummer
  sub.w   #bv_light_z_coordinate,d0 ;D=zm-zl

; ** Farbintensität der Fläche ermitteln **
  move.w  bv_object_info_lines_number-bv_object_info_face_color(a0),d6 ;Anzahl der Linien
  sub.w   #bv_D0,d0          ;D-D0
  bgt.s   bv_no_underflow_distance ;Wenn > Null -> verzweige
  moveq   #1,d0              ;D=1
bv_no_underflow_distance
  divu.w  d0,d1              ;RtdRGB=(kdRGB*EpRGB)/(D-D0)
  IFEQ bv_EpRGB_check_max
    cmp.w   #bv_EpRGB,d1     ;Wenn <= Maximalwert -> verzweige
    ble.s   bv_EpRGB_max_ok
    MOVEF.W bv_EpRGB_max,d1  ;Maximalwert setzen
bv_EpRGB_max_ok
  ENDC

; ** Farbwert in Copperliste eintragen **
  move.l  (a7,d1.w*4),d0
  move.w  d0,(cl1_COLOR12_low5-cl1_COLOR12_high5,a4,d7.w*4) ;Low-Bits COLORxx
  swap    d0                 ;High
  move.w  d0,(a4,d7.w*4)     ;High-Bits COLORxx

bv_draw_lines_loop2
  move.w  (a5)+,d0           ;Startwerte der Punkte P1,P2
  move.w  (a5),d2
  movem.w (a1,d0.w*2),d0-d1  ;xp1,xp2-Koords
  movem.w (a1,d2.w*2),d2-d3  ;yp1,yp2-Koords
  cmp.w   d1,d3
  beq     bv_no_line         ;Wenn Y1 = Y2 -> verzweige
  bgt.s   bv_no_high         ;Wenn Y2 > Y1  -> verzweige
  exg     d0,d2              ;X1 mit X2 vertauschen
  exg     d1,d3              ;Y1 mit Y2 vertauschen
bv_no_high
  addq.w  #1,d1              ;Y1 + 1
  moveq   #BLTCON1F_SUD,d5   ;Octant #7
  sub.w   d0,d2              ;dx=x2-x1
  bpl.s   bv_no_octant4      ;Wenn positiv -> verzweige
  addq.w  #BLTCON1F_AUL,d5   ;Octant #4
  neg.w   d2                 ;Vorzeichen umdrehen
bv_no_octant4
  sub.w   d1,d3              ;dy=y2-y1
  ror.l   #4,d0              ;Shift-Bits in richtige Position bringen
  MULUF.W (extra_pf_plane_width1*extra_pf1_depth)/2,d1,d4 ;Y-Offset in Playfield
  add.w   d0,d1              ;Y + X-Offset
  cmp.w   d2,d3              
  ble.s   bv_no_octant5      ;Wenn dy <= dx -> verzweige
  SUBF.W  BLTCON1F_SUD,d5
  exg     d2,d3              ;dx mit dy vertauschen
  add.w   d5,d5              ;Octant #1,5,6
bv_no_octant5
  MULUF.W 4,d3               ;dy*4
  move.w  d5,d0              ;Oktanten-Bits retten
  move.w  d3,d4              ;4*dy retten
  swap    d4                 ;Bits 16-31 = 4*dy
  MULUF.W 2,d2               ;dx*2
  move.w  d3,d4              ;Bits 0-15 = 4*dy
  sub.w   d2,d3              ;(4*dy)-(2*dx)
  bpl.s   bv_no_sign_bit     ;Wenn positiv -> verzweige
  or.w    #BLTCON1F_SIGN,d0  ;Vorzeichenbit setzen
bv_no_sign_bit
  MULUF.W 2,d2               ;2*(2*dx) = 4*dx
  MULUF.W 2,d1               ;*2 = XY-Offset
  sub.w   d2,d4              ;Bits 0-15 = (4*dy)-(4*dx)
  addq.w  #1*4,d2            ;(4*dx)+(1*4)
  add.l   a2,d1              ;+ Playfieldadresse
  MULUF.W 16,d2              ;((4*dx)+(1*4))*16 = Länge der Linie
  add.l   a3,d0              ;restliche BLTCON0 & BLTCON1-Bits setzen
  addq.w  #2,d2              ;Breite = 1 Wort
bv_check_plane1
  btst    #0,d7              ;Plane 0 ?
  beq.s   bv_check_plane2    ;Nein -> verzweige
  WAITBLIT
  move.l  d0,BLTCON0-DMACONR(a6) ;BLTCON0 & BLTCON1
  move.w  d3,BLTAPTL-DMACONR(a6) ;(4*dy)-(2*dx)
  move.l  d1,BLTCPT-DMACONR(a6) ;Playfield lesen
  move.l  d1,BLTDPT-DMACONR(a6) ;Playfield schreiben
  move.l  d4,BLTBMOD-DMACONR(a6) ;4*dy, 4*(dy-dx)
  move.w  d2,BLTSIZE-DMACONR(a6) ;Blitter starten
bv_check_plane2
  btst    #1,d7              ;Plane 1 ?
  beq.s   bv_no_line         ;Nein -> verzweige
  WAITBLIT
  move.l  d0,BLTCON0-DMACONR(a6) ;BLTCON0 & BLTCON1
  moveq   #extra_pf_plane_width1,d5
  move.w  d3,BLTAPTL-DMACONR(a6) ;(4*dy)-(2*dx)
  add.l   d5,d1              ;nächste Plane
  move.l  d1,BLTCPT-DMACONR(a6) ;Playfield lesen
  move.l  d1,BLTDPT-DMACONR(a6) ;Playfield schreiben
  move.l  d4,BLTBMOD-DMACONR(a6) ;4*dy, 4*(dy-dx)
  move.w  d2,BLTSIZE-DMACONR(a6) ;Blitter starten
bv_no_line
  dbf     d6,bv_draw_lines_loop2
bv_no_face_visible
  swap    d7                 ;Flächenzähler 
  addq.w  #4,a0              ;Farbnummer und Anzahl der Linien überspringen
  dbf     d7,bv_draw_lines_loop1
  move.l  variables+save_a7(pc),a7 ;Alten Stackpointer 
  movem.l (a7)+,a3-a5
  move.w  #DMAF_BLITHOG,DMACON-DMACONR(a6)
bv_no_draw_lines
  rts

  CNOP 0,4
bv_init_line_blit
  move.w  #DMAF_BLITHOG+DMAF_SETCLR,DMACON-DMACONR(a6)
  WAITBLIT
  move.l  #$ffff8000,BLTBDAT-DMACONR(a6) ;Textur der Linie, Standartwert
  moveq   #FALSE,d0
  move.l  d0,BLTAFWM-DMACONR(a6) ;Keine Ausmask.
  moveq   #extra_pf_plane_width1*extra_pf1_depth,d0
  move.w  d0,BLTCMOD-DMACONR(a6)
  move.w  d0,BLTDMOD-DMACONR(a6)
  rts

; ** Playfield füllen **
  CNOP 0,4
bv_fill_image
  move.l  extra_pf2(a3),a0   ;Playfield
  WAITBLIT
  move.l  (a0),a0
  move.l  #((BC0F_SRCA+BC0F_DEST+ANBNC+ANBC+ABNC+ABC)<<16)+(BLTCON1F_DESC+BLTCON1F_EFE),BLTCON0-DMACONR(a6) ;Minterm D=A, Füll-Modus, Rückwärts
  ADDF.W  (extra_pf_plane_width1*extra_pf1_y_size*extra_pf1_depth)-2,a0 ;Ende des Playfieldes
  move.l  a0,BLTAPT-DMACONR(a6) ;Quelle
  move.l  a0,BLTDPT-DMACONR(a6) ;Ziel
  moveq   #0,d0
  move.l  d0,BLTAMOD-DMACONR(a6) ;A+D-Mod
  move.w  #(bv_fill_blit_y_size*bv_fill_blit_depth*64)+(bv_fill_blit_x_size/16),BLTSIZE-DMACONR(a6)
  rts

; ** Rotate-Routine **
  CNOP 0,4
bv_rotation
  movem.l a4-a6,-(a7)
  lea     bv_3d_object(pc),a0 ;Koordinaten der Linien
  lea     bv_xyz_rotation_coordinates(pc),a1 ;Koord.-Tab.
  lea     sine_table(pc),a2   
  move.w  #sine_table_length/4,a6 ;90 Grad
  move.w  bv_x_rotation_angle(a3),d0 ;X-Winkel
  move.w  d0,d7              
  move.w  2(a2,d0.w*4),d4    ;sin(a)
  add.w   a6,d7              ;+ 90 Grad
  MOVEF.W sine_table_length-1,d3
  and.w   d3,d7              ;Übertrag entfernen
  move.w  bv_y_rotation_angle(a3),d1 ;Y-Winkel
  swap    d4                 ;Bits 16-31 = sin(a)
  move.w  #bv_d*8,a4         ;d
  add.l   bv_zoom_distance(a3),a4
  move.w  2(a2,d7.w*4),d4    ;Bits  0-15 = cos(a)
  move.w  d1,d7              
  move.w  2(a2,d1.w*4),d5    ;sin(b)
  add.w   a6,d7              ;+ 90 Grad
  move.w  #bv_xy_rotation_centre,a5 ;X+Y-Mittelpunkt
  and.w   d3,d7              ;Übertrag entfernen
  move.w  bv_z_rotation_angle(a3),d2 ;Z-Winkel
  swap    d5                 ;Bits 16-31 = sin(b)
  move.w  2(a2,d7.w*4),d5    ;Bits  0-15 = cos(b)
  move.w  d2,d7              
  add.w   a6,d7              ;+ 90 Grad
  move.w  2(a2,d2.w*4),d6    ;sin(c)
  and.w   d3,d7              ;Übertrag entfernen
  swap    d6                 ;Bits 16-31 = sin(c)
  add.w   bv_variable_x_rotation_angle_speed(a3),d0 ;nächster X-Winkel
  move.w  2(a2,d7.w*4),d6    ;Bits  0-15 = cos(c)
  and.w   d3,d0              ;Übertrag entfernen
  add.w   bv_variable_y_rotation_angle_speed(a3),d1  ;nächster Y-Winkel
  move.w  d0,bv_x_rotation_angle(a3) 
  and.w   d3,d1              ;Übertrag entfernen
  add.w   bv_variable_z_rotation_angle_speed(a3),d2 ;nächster Z-Winkel
  move.w  d1,bv_y_rotation_angle(a3) 
  and.w   d3,d2              ;Übertrag entfernen
  move.w  d2,bv_z_rotation_angle(a3) 
  move.w  #bv_object1_edge_points_number-1,d7 ;Anzahl der Punkte
bv_rotatation_loop
  move.w  (a0)+,d0           ;X-Koord.
  move.l  d7,a2              ;Inhalt von d7 retten
  move.w  (a0)+,d1           ;Y-Koord.

; ** Rotation um die X-Achse **
  move.w  d1,d3              ;Y -> d3
  move.w  (a0)+,d2           ;Z-Koord.
  muls.w  d4,d1              ;y*cos(a)
  swap    d4                 ;sin(w)
  move.w  d2,d7              ;Z -> d7
  muls.w  d4,d3              ;y*sin(a)
  muls.w  d4,d7              ;z*sin(a)
  swap    d4                 ;cos(a)
  sub.l   d7,d1              ;y*cos(a)-z*sin(a)
  muls.w  d4,d2              ;z*cos(a)
  add.l   d1,d1              ;y'=(y*cos(a)-z*sin(a))/2^15
  add.l   d3,d2              ;y*sin(a)+z*cos(a)
  swap    d1                 ;Y-Pos.
  add.l   d2,d2              ;z'=(y*sin(a)+z*cos(a))/2^15
  move.w  d0,d3              ;X -> d3
  swap    d2                 ;Z-Pos.

; ** Rotation um die Y-Achse **
  muls.w  d5,d0              ;x*cos(b)
  swap    d5                 ;sin(b)
  move.w  d2,d7              ;Z -> d7
  muls.w  d5,d3              ;x*sin(b)
  muls.w  d5,d7              ;z*sin(b)
  swap    d5                 ;cos(b)
  add.l   d7,d0              ;x*cos(b)+z*sin(b)
  muls.w  d5,d2              ;z*cos(b)
  add.l   d0,d0              ;x'=(x*cos(b)+z*sin(b))/2^15
  sub.l   d3,d2              ;z*cos(b)-x*sin(b)
  swap    d0                 ;X-Pos.
  add.l   d2,d2              ;z'=(z*cos(b)-x*sin(b))/2^15
  move.w  d0,d3              ;X -> d3
  swap    d2                 ;Z-Pos.

; ** Rotation um die Z-Achse **
  muls.w  d6,d0              ;x*cos(c)
  swap    d6                 ;sin(c)
  move.w  d1,d7              ;Y -> d7
  muls.w  d6,d3              ;x*sin(c)
  muls.w  d6,d7              ;y*sin(c)
  swap    d6                 ;cos(c)
  sub.l   d7,d0              ;x*cos(c)-y*sin(c)
  muls.w  d6,d1              ;y*cos(c)
  add.l   d0,d0              ;x'=(x*cos(c)-y*sin(c))/2^15
  add.l   d3,d1              ;x*sin(c)+y*cos(c)
  swap    d0                 ;X-Pos.
  add.l   d1,d1              ;y'=(x*sin(c)+y*cos(c))/2^15
  move.w  d2,d3              ;z -> d3
  ext.l   d0                 ;Auf 32 Bit erweitern
  swap    d1                 ;Y-Pos.

; ** Zentralprojektion und Translation **
  MULUF.L bv_d,d0            ;x*d  X-Projektion
  ext.l   d1                 ;Auf 32 Bit erweitern
  add.w   a4,d3              ;z+d
  MULUF.L bv_d,d1            ;y*d  Y-Projektion
  divs.w  d3,d0              ;x'=(x*d)/(z+d)
  divs.w  d3,d1              ;y'=(y*d)/(z+d)
  add.w   a5,d0              ;x' + X-Mittelpunkt
  move.w  d0,(a1)+           ;X-Pos.
  add.w   a5,d1              ;y' + Y-Mittelpunkt
  move.w  d1,(a1)+           ;Y-Pos.
  asr.w   #3,d2              ;Z/8
  move.w  d2,(a1)+           ;Z-Pos.
  move.l  a2,d7              ;Alten Inhalt von d7 
  dbf     d7,bv_rotatation_loop
  movem.l (a7)+,a4-a6
  rts

; ** Playfield löschen **
  CNOP 0,4
bv_clear_image
  move.l  extra_pf1(a3),a0
  WAITBLIT
  move.l  (a0),a0
  move.l  #BC0F_DEST<<16,BLTCON0-DMACONR(a6) ;Minterm Löschen
  move.l  a0,BLTDPT-DMACONR(a6)
  moveq   #0,d0
  move.w  d0,BLTDMOD-DMACONR(a6) ;D-Mod
  move.w  #(bv_clear_blit_y_size*bv_clear_blit_depth*64)+(bv_clear_blit_x_size/16),BLTSIZE-DMACONR(a6)
  rts

;  movem.l a3-a6,-(a7)
;  moveq   #0,d0
;  move.l  a7,save_a7(a3)     
;  moveq   #TRUE,d1
;  move.l  extra_pf1(a3),a7   ;Zeiger erste Plane
;  moveq   #TRUE,d2
;  move.l  (a7),a7
;  moveq   #TRUE,d3
;  ADDF.W  extra_pf_plane_width1*extra_pf1_y_size*extra_pf1_depth,a7 ;Ende des Playfieldes
;  moveq   #TRUE,d4
;  moveq   #TRUE,d5
;  moveq   #TRUE,d6
;  move.l  d0,a0
;  move.l  d0,a1
;  move.l  d0,a2
;  move.l  d0,a3
;  move.l  d0,a4
;  move.l  d0,a5
;  move.l  d0,a6
;  moveq   #2-1,d7            ;Anzahl der Durchläufe (Ausnahme wegen Longword-Alignement)
;bv_clear_image_loop
;  REPT ((extra_pf_plane_width1*extra_pf1_y_size*extra_pf1_depth)/56)/2
;  movem.l d0-d6/a0-a6,-(a7)  ;56 Bytes löschen
;  ENDR
;  dbf     d7,bv_clear_image_loop
;  movem.l d0-d6/a0-a6,-(a7)  ;56 Bytes löschen
;  movem.l d0-d1,-(a7)        ;8 Bytes löschen
;  move.l  variables+save_a7(pc),a7 ;Alter Stackpointer
;  movem.l (a7)+,a3-a6
;  rts

; ** Puffer in Sprite-Strukturen kopieren **
  CNOP 0,4
bv_copy_image
  move.l  a4,-(a7)
  move.l  extra_pf3(a3),a0
  move.l  (a0),a0            ;Puffer
  lea     spr_pointers_construction+(6*4)(pc),a2 ;Aufbau-Sprites
  move.l  (a2)+,a1           ;Sprite6
  ADDF.W  (spr_pixel_per_datafetch/4),a1 ;Header überspringen
  move.l  (a2),a2            ;Sprite7
  ADDF.W  (spr_pixel_per_datafetch/4),a2 ;Header überspringen
  moveq   #bv_image_y_size-1,d7 ;Anzahl der Zeilen zum Kopieren
bv_copy_image_loop
  movem.l (a0)+,d0-d6/a4  ;BP0&1 128 Pixel lesen
  move.l  d0,(a1)+        ;Sprite0 BP0 64 Pixel
  move.l  d1,(a1)+
  move.l  d2,(a2)+        ;Sprite1 BP0 64 Pixel
  move.l  d3,(a2)+
  move.l  d4,(a1)+        ;Sprite0 BP1 64 Pixel
  move.l  d5,(a1)+
  move.l  d6,(a2)+        ;Sprite1 BP1 64 Pixel
  move.l  a4,(a2)+
  dbf     d7,bv_copy_image_loop
  move.l  (a7)+,a4
  rts

; ** 2xCos-Schwabbel-Effekt **
  CNOP 0,4
bv_wobble_sprites
  movem.l a4-a5,-(a7)
  lea     spr_pointers_construction+(6*4)(pc),a1 ;Zeiger auf Sprites
  move.l  (a1)+,a0           ;Sprite6-Struktur
  move.w  (a0),d3            ;SPR6POS
  move.l  (a1),a0            ;Sprite7-Struktur
  move.w  (a0),d4            ;SPR7POS
  lea     sine_table(pc),a1  
  move.l  cl1_construction2(a3),a2
  ADDF.W  cl1_extension1_entry+cl1_ext1_subextension1_entry+cl1_subext1_SPR6POS+2,a2 ;CL
  move.w  #bv_wobble_x_centre,a4
  move.w  #cl1_subextension1_size,a5
  move.w  bv_wobble_x_radius_angle(a3),d1 ;X-Winkel
  move.w  d1,d0              
  MOVEF.W sine_table_length-1,d5
  addq.w  #bv_wobble_x_radius_angle_speed,d0 ;nächster X-Radius-Winkel
  move.w  bv_wobble_x_angle(a3),d2 ;X-Winkel
  and.w   d5,d0              ;Überlauf entfernen
  move.w  d0,bv_wobble_x_radius_angle(a3) ;Startwert retten
  move.w  d2,d0              
  addq.w  #bv_wobble_x_angle_speed,d0 ;nächster X-Winkel
  and.w   d5,d0              ;Überlauf entfernen
  move.w  d0,bv_wobble_x_angle(a3) ;Startwert retten
  MOVEF.W cl2_display_y_size-1,d7 ;Anzahl der Zeilen
bv_wobble_sprites_loop1
  moveq   #crz_display_y_scale_factor-1,d6 ;Anzahl der Abschnitte für Y-Skalierung
bv_wobble_sprites_loop2
  move.l  (a1,d1.w*4),d0     ;cos(w)
  MULUF.L bv_wobble_x_radius*4,d0,a0 ;xr'=(xr*cos(w))/2*^15
  addq.w  #bv_wobble_x_radius_angle_step,d1 ;nächster X-Radius-Winkel
  swap    d0
  and.w   d5,d1              ;Überlauf entfernen
  muls.w  2(a1,d2.w*4),d0    ;x'=(xr'*cos(w))/2*^15
  addq.w  #bv_wobble_x_angle_step,d2 ;nächster X-Winkel
  swap    d0
  and.w   d5,d2              ;Überlauf entfernen
  add.w   a4,d0              ;x' + X-Mittelpunkt
  move.w  d0,a0              
  add.w   d3,d0              ;+ X-Shift
  move.w  d0,(a2)            ;Neue SPR6POS in CL Schreiben
  add.w   d4,a0              ;+ X-Shift
  move.w  a0,4(a2)           ;Neue SPR7POS in CL schreiben
  add.l   a5,a2              ;nächste Zeile in CL
  dbf     d6,bv_wobble_sprites_loop2
  addq.w  #8,a2              ;COP2LCH + COP2LCL überspringen
  dbf     d7,bv_wobble_sprites_loop1
  movem.l (a7)+,a4-a5
  rts

; ** Funktionstasten abfragen **
  CNOP 0,4
keyboard_handler
  btst    #CIAICRB_SP,CIAICR(a4) ;CIA-A SP-Interrupt ?
  beq     kh_no_keyboard_handler ;Nein verzweige
  btst    #CIACRAB_SPMODE,CIACRA(a4) ;Ausgabe ?
  bne     kh_no_keyboard_handler ;Ja -> verzweige
  move.b  CIASDR(a4),d0      ;Tastencode 
  ror.b   #1,d0              ;Bits in richtige Position bringen
  not.b   d0                 ;Alle Bits umdrehen
  bmi.s   kh_reset_serial_port ;Taste losgelassen ?
  tst.b   kh_key_flag(a3)    ;Bereits ein Code gespeichert ?
  bne.s   kh_reset_serial_port ;Ja -> verzweige
  move.b  d0,kh_key_code(a3) ;Code speichern
  not.b   kh_key_flag(a3)    ;Key-Flag setzen
kh_reset_serial_port
  moveq   #FALSE,d0
  move.b  d0,CIASDR(a4)      ;Tastaturleitung auf Low setzen
  moveq   #CIACRAF_START+CIACRAF_SPMODE,d0
  or.b    d0,CIACRA(a4)      ;CIA-A-Timer-A starten ,Serieller-Port = Ausgabe
kh_delay_loop
  btst    #CIACRAB_START,CIACRA(a4)
  bne.s   kh_delay_loop
  moveq   #0,d0
  move.b  d0,CIASDR(a4)      ;Tastaturleitung auf High setzen
  moveq   #~CIACRAF_SPMODE,d0
  and.b   d0,CIACRA(a4)      ;Serieller-Port = Eingabe
kh_check_key
  clr.b   kh_key_flag(a3)    ;Key-Flag löschen
  move.b  kh_key_code(a3),d0
  cmp.b   #kh_key1,d0        ;F1 ?
  beq.s   kh_set_xyz_rotation_angle_speed1
  cmp.b   #kh_key2,d0        ;F2 ?
  beq.s   kh_set_xyz_rotation_angle_speed2
  cmp.b   #kh_key3,d0        ;F3 ?
  beq.s   kh_set_xyz_rotation_angle_speed3
  cmp.b   #kh_key4,d0        ;F4 ?
  beq.s   kh_set_xyz_rotation_angle_speed4
  cmp.b   #kh_key5,d0        ;F5 ?
  beq.s   kh_set_xyz_rotation_angle_speed5
  cmp.b   #kh_key6,d0        ;F6 ?
  beq     kh_set_xyz_rotation_angle_speed6
  cmp.b   #kh_key7,d0        ;F7 ?
  beq     kh_set_xyz_rotation_angle_speed7
  cmp.b   #kh_key8,d0        ;F8 ?
  beq     kh_set_xyz_rotation_angle_speed8
  cmp.b   #kh_key9,d0        ;F9 ?
  beq     kh_set_xyz_rotation_angle_speed9
  cmp.b   #kh_key10,d0       ;F10 ?
  beq     kh_set_xyz_rotation_angle_speed10
kh_no_keyboard_handler
  rts
  CNOP 0,4
kh_set_xyz_rotation_angle_speed1
  moveq   #bv_x_rotation_angle_speed1,d2
  move.w  d2,bv_variable_x_rotation_angle_speed(a3)
  moveq   #bv_y_rotation_angle_speed1,d2
  move.w  d2,bv_variable_y_rotation_angle_speed(a3)
  moveq   #bv_z_rotation_angle_speed1,d2
  move.w  d2,bv_variable_z_rotation_angle_speed(a3)
  rts
  CNOP 0,4
kh_set_xyz_rotation_angle_speed2
  moveq   #bv_x_rotation_angle_speed2,d2
  move.w  d2,bv_variable_x_rotation_angle_speed(a3)
  moveq   #bv_y_rotation_angle_speed2,d2
  move.w  d2,bv_variable_y_rotation_angle_speed(a3)
  moveq   #bv_z_rotation_angle_speed2,d2
  move.w  d2,bv_variable_z_rotation_angle_speed(a3)
  rts
  CNOP 0,4
kh_set_xyz_rotation_angle_speed3
  moveq   #bv_x_rotation_angle_speed3,d2
  move.w  d2,bv_variable_x_rotation_angle_speed(a3)
  moveq   #bv_y_rotation_angle_speed3,d2
  move.w  d2,bv_variable_y_rotation_angle_speed(a3)
  moveq   #bv_z_rotation_angle_speed3,d2
  move.w  d2,bv_variable_z_rotation_angle_speed(a3)
  rts
  CNOP 0,4
kh_set_xyz_rotation_angle_speed4
  moveq   #bv_x_rotation_angle_speed4,d2
  move.w  d2,bv_variable_x_rotation_angle_speed(a3)
  moveq   #bv_y_rotation_angle_speed4,d2
  move.w  d2,bv_variable_y_rotation_angle_speed(a3)
  moveq   #bv_z_rotation_angle_speed4,d2
  move.w  d2,bv_variable_z_rotation_angle_speed(a3)
  rts
  CNOP 0,4
kh_set_xyz_rotation_angle_speed5
  moveq   #bv_x_rotation_angle_speed5,d2
  move.w  d2,bv_variable_x_rotation_angle_speed(a3)
  moveq   #bv_y_rotation_angle_speed5,d2
  move.w  d2,bv_variable_y_rotation_angle_speed(a3)
  moveq   #bv_z_rotation_angle_speed5,d2
  move.w  d2,bv_variable_z_rotation_angle_speed(a3)
  rts
  CNOP 0,4
kh_set_xyz_rotation_angle_speed6
  moveq   #bv_x_rotation_angle_speed6,d2
  move.w  d2,bv_variable_x_rotation_angle_speed(a3)
  moveq   #bv_y_rotation_angle_speed6,d2
  move.w  d2,bv_variable_y_rotation_angle_speed(a3)
  moveq   #bv_z_rotation_angle_speed6,d2
  move.w  d2,bv_variable_z_rotation_angle_speed(a3)
  rts
  CNOP 0,4
kh_set_xyz_rotation_angle_speed7
  moveq   #bv_x_rotation_angle_speed7,d2
  move.w  d2,bv_variable_x_rotation_angle_speed(a3)
  moveq   #bv_y_rotation_angle_speed7,d2
  move.w  d2,bv_variable_y_rotation_angle_speed(a3)
  moveq   #bv_z_rotation_angle_speed7,d2
  move.w  d2,bv_variable_z_rotation_angle_speed(a3)
  rts
  CNOP 0,4
kh_set_xyz_rotation_angle_speed8
  moveq   #bv_x_rotation_angle_speed8,d2
  move.w  d2,bv_variable_x_rotation_angle_speed(a3)
  moveq   #bv_y_rotation_angle_speed8,d2
  move.w  d2,bv_variable_y_rotation_angle_speed(a3)
  moveq   #bv_z_rotation_angle_speed8,d2
  move.w  d2,bv_variable_z_rotation_angle_speed(a3)
  rts
  CNOP 0,4
kh_set_xyz_rotation_angle_speed9
  moveq   #bv_x_rotation_angle_speed9,d2
  move.w  d2,bv_variable_x_rotation_angle_speed(a3)
  moveq   #bv_y_rotation_angle_speed9,d2
  move.w  d2,bv_variable_y_rotation_angle_speed(a3)
  moveq   #bv_z_rotation_angle_speed9,d2
  move.w  d2,bv_variable_z_rotation_angle_speed(a3)
  rts
  CNOP 0,4
kh_set_xyz_rotation_angle_speed10
  moveq   #bv_x_rotation_angle_speed10,d2
  move.w  d2,bv_variable_x_rotation_angle_speed(a3)
  moveq   #bv_y_rotation_angle_speed10,d2
  move.w  d2,bv_variable_y_rotation_angle_speed(a3)
  moveq   #bv_z_rotation_angle_speed10,d2
  move.w  d2,bv_variable_z_rotation_angle_speed(a3)
  rts

; ** Grafik einblenden **
  CNOP 0,4
image_fader_in
  tst.w   ifi_active(a3)     ;24-Bit-Sine-fader-In an ?
  bne.s   no_image_fader_in  ;Nein -> verzweige
  movem.l a3-a6,-(a7)
  move.w  ifi_fader_angle(a3),d1 ;Fader-Winkel 
  cmp.w   #sine_table_length/2,d1 ;Y-Winkel <= 180 Grad ?
  ble.s   ifi_no_fader_angle_restart ;Ja -> verzweige
  MOVEF.W sine_table_length/2,d1 ;180 Grad
ifi_no_fader_angle_restart
  lea     sine_table(pc),a0  
  move.w  2(a0,d1.w*2),d0    ;sin(w)
  addq.w  #ifi_fader_angle_speed,d1 ;nächster Fader-Winkel
  MULSF.W ifi_fader_radius*2,d0,d2 ;y'=(yr*sin(w))/2^15
  move.w  d1,ifi_fader_angle(a3) 
  swap    d0
  move.l  cl1_display(a3),a0 ;CL
  addq.w  #ifi_fader_centre,d0 ;+ Fader-Mittelpunkt
  lea     if_color_cache(pc),a1 ;Puffer für Farbwerte
  lea     ifi_color_table(pc),a2 ;Sollwerte
  move.w  #bg_image_colors_number*3,a3 ;Zähler
  move.w  d0,a6              ;Additions-/Subtraktionswert für Blau
  swap    d0                 ;WORDSHIFT
  ADDF.W  cl1_COLOR00_high1+2,a0 ;Istwerte
  clr.w   d0                 ;Bits 0-15 löschen
  move.l  d0,a4              ;Additions-/Subtraktionswert für Rot
  lsr.l   #8,d0              ;BYTESHIFT
  move.l  d0,a5              ;Additions-/Subtraktionswert für Grün
  IFGT bg_image_colors_number-32
    moveq   #TRUE,d6         ;Farbregisterzähler
  ENDC
  MOVEF.W bg_image_colors_number-1,d7 ;Anzahl der Farben
  bsr.s   image_fader_loop
  move.w  a3,d0              ;Fertig mit einblenden ?
  movem.l (a7)+,a3-a6
  bne.s   no_image_fader_in  ;Nein -> verzweige
  not.w   ifi_active(a3)     ;Image-Fader-In aus
no_image_fader_in
  rts

; ** Grafik ausblenden **
  CNOP 0,4
image_fader_out
  tst.w   ifo_active(a3)     ;24-Bit-Image-Fader-Out an ?
  bne.s   no_image_fader_out ;Nein -> verzweige
  movem.l a3-a6,-(a7)
  move.w  ifo_fader_angle(a3),d1 ;Fader-Winkel 
  cmp.w   #sine_table_length/2,d1 ;Y-Winkel <= 180 Grad ?
  ble.s   ifo_no_fader_angle_restart ;Ja -> verzweige
  MOVEF.W sine_table_length/2,d1 ;180 Grad
ifo_no_fader_angle_restart
  lea     sine_table(pc),a0  
  move.w  2(a0,d1.w*2),d0    ;sin(w)
  addq.w  #ifo_fader_angle_speed,d1 ;nächster Fader-Winkel
  MULSF.W ifo_fader_radius*2,d0,d2 ;y'=(yr*sin(w))/2^15
  move.w  d1,ifo_fader_angle(a3) 
  swap    d0
  move.l  cl1_display(a3),a0 ;CL
  addq.w  #ifo_fader_centre,d0 ;+ Fader-Mittelpunkt
  lea     if_color_cache(pc),a1 ;Puffer für Farbwerte
  lea     ifo_color_table(pc),a2 ;Sollwerte
  move.w  #bg_image_colors_number*3,a3 ;Zähler
  move.w  d0,a6              ;Additions-/Subtraktionswert für Blau
  swap    d0                 ;WORDSHIFT
  ADDF.W  cl1_COLOR00_high1+2,a0 ;Istwerte
  clr.w   d0                 ;Bits 0-15 löschen
  move.l  d0,a4              ;Additions-/Subtraktionswert für Rot
  lsr.l   #8,d0              ;BYTESHIFT
  move.l  d0,a5              ;Additions-/Subtraktionswert für Grün
  IFGT bg_image_colors_number-32
    moveq   #TRUE,d6         ;Farbregisterzähler
  ENDC
  MOVEF.W bg_image_colors_number-1,d7 ;Anzahl der Farben
  bsr.s   image_fader_loop
  move.w  a3,d0              ;Fertig mit ausblenden ?
  movem.l (a7)+,a3-a6
  bne.s   no_image_fader_out ;Nein -> verzweige
  not.w   ifo_active(a3)     ;Image-Fader-Out aus
no_image_fader_out
  rts

  CNOP 0,4
image_fader_loop
  move.l  (a1),d0            ;24-Bit RGB-Istwert
  moveq   #TRUE,d1
  move.w  d0,d1              ;$00GgBb
  moveq   #TRUE,d2
  clr.b   d1                 ;$00Gg00
  move.b  d0,d2              ;$0000Bb
  clr.w   d0                 ;$Rr0000
  move.l  (a2)+,d3           ;24-Bit RGB-Sollwert
  moveq   #TRUE,d4
  move.w  d3,d4              ;$00GgBb
  moveq   #TRUE,d5
  move.b  d3,d5              ;$0000Bb
  clr.w   d3                 ;$Rr0000
  clr.b   d4                 ;$00Gg00

; ** Rotwert **
if_check_red_nibble
  cmp.l   d3,d0              ;Ist-Rotwert mit Soll-Rotwert vergleichen
  bgt.s   if_decrease_red    ;Wenn Ist-Rotwert > Soll-Rotwert -> verzweige
  blt.s   if_increase_red    ;Wenn Ist-Rotwert < Soll-Rotwert -> verzweige
if_matched_red
  subq.w  #1,a3              ;Zähler verringern

; ** Grünwert **
if_check_green_nibble
  cmp.l   d4,d1              ;Ist-Grünwert mit Soll-Grünwert vergleichen
  bgt.s   if_decrease_green  ;Wenn Ist-Grünwert > Soll-Grünwert -> verzweige
  blt.s   if_increase_green  ;Wenn Ist-Grünwert < Soll-Grünwert -> verzweige
if_matched_green
  subq.w  #1,a3              ;Zähler verringern

; ** Blauwert **
if_check_blue_nibble
  cmp.w   d5,d2              ;Ist-Blauwert mit Soll-Blauwert vergleichen
  bgt.s   if_decrease_blue   ;Wenn Ist-Blauwert > Soll-Blauwert -> verzweige
  blt.s   if_increase_blue   ;Wenn Ist-Blauwert < Soll-Blauwert -> verzweige
if_matched_blue
  subq.w  #1,a3              ;Zähler verringern

if_merge_rgb_nibbles
  move.l  d0,d3              ;neuer Rotwert  $Rr0000
  move.w  d1,d3              ;neuer Grünwert $RrGg00

; ** Farbwerte in Copperliste eintragen **
  lsr.w   #4,d1              ;$0Gg0
  move.b  d2,d3              ;neuer Blauwert $RrGgBb
  move.w  d1,d4              
  move.l  d3,(a1)+           ;neuen RGB-Wert in Cache schreiben
  move.b  d2,d1              ;$0GBb
  swap    d0                 ;$00Rr
  lsr.w   #4,d1              ;$00GB
  lsl.w   #4,d0              ;$0Rr0
  and.b   #$0f,d2            ;$0b
  move.b  d1,d0              ;$0RGB
  lsr.l   #4,d3              ;$r000
  move.w  d0,(a0)            ;High-Bits COLORxx
  or.b    d2,d4              ;$0Ggb
  lsr.w   #4,d3              ;$0r00
  addq.w  #4,a0              ;nächstes Farbregister
  move.b  d4,d3              ;$0rgb
  move.w  d3,cl1_COLOR00_low1-cl1_COLOR00_high1-4(a0) ;Low-Bits COLORxx
  IFGT    bg_image_colors_number-32
    addq.b  #1*8,d6          ;Farbregister-Zähler erhöhen
    bne.s   if_no_color_bank_restart ;Nein -> verzweige
    addq.w  #4,a0            ;BPLCON3 überspringen
if_no_color_bank_restart
  ENDC
  dbf     d7,image_fader_loop
  rts
  CNOP 0,4
if_decrease_red
  sub.l   a4,d0              ;Rotanteil verringern
  cmp.l   d3,d0              ;Ist-Rotwert >= Soll-Rotwert ?
  bge.s   if_check_green_nibble     ;Ja -> verzweige
  move.l  d3,d0              ;Rotanteil Zielwert
  bra.s   if_matched_red
  CNOP 0,4
if_increase_red
  add.l   a4,d0              ;Rotanteil erhöhen
  cmp.l   d3,d0              ;Ist-Rotwert <= Soll-Rotwert ?
  ble.s   if_check_green_nibble     ;Ja -> verzweige
  move.l  d3,d0              ;Rotanteil Zielwert
  bra.s   if_matched_red
  CNOP 0,4
if_decrease_green
  sub.l   a5,d1              ;Grünanteil verringern
  cmp.l   d4,d1              ;Ist-Grünwert >= Soll-Grünwert ?
  bge.s   if_check_blue_nibble      ;Ja -> verzweige
  move.l  d4,d1              ;Grünanteil Zielwert
  bra.s   if_matched_green
  CNOP 0,4
if_increase_green
  add.l   a5,d1              ;Grünanteil erhöhen
  cmp.l   d4,d1              ;Ist-Grünwert <= Soll-Grünwert ?
  ble.s   if_check_blue_nibble      ;Ja -> verzweige
  move.l  d4,d1              ;Grünanteil Zielwert
  bra.s   if_matched_green
  CNOP 0,4
if_decrease_blue
  sub.w   a6,d2              ;Blauanteil verringern
  cmp.w   d5,d2              ;Ist-Blauwert >= Soll-Blauwert ?
  bge.s   if_merge_rgb_nibbles       ;Ja -> verzweige
  move.w  d5,d2              ;Blauanteil Zielwert
  bra.s   if_matched_blue
  CNOP 0,4
if_increase_blue
  add.w   a6,d2              ;Blauanteil erhöhen
  cmp.w   d5,d2              ;Ist-Blauwert <= Soll-Blauwert ?
  ble.s   if_merge_rgb_nibbles       ;Ja -> verzweige
  move.w  d5,d2              ;Blauanteil Zielwert
  bra.s   if_matched_blue

  CNOP 0,4
copy_color_table
  move.l  cl1_display(a3),a0 ;Quelle
  ADDF.W  cl1_COLOR00_high1+2,a0
  move.l  cl1_construction2(a3),a1 ;Ziel
  ADDF.W  cl1_COLOR00_high1+2,a1
  IFGT pf1_colors_number-32
    moveq   #0,d0         ;Farbregisterzähler
  ENDC
  MOVEF.W pf1_colors_number-1,d7 ;Anzahl der Farben
copy_color_table_loop
  move.w  (a0),(a1)            ;High-Bits COLORxx
  move.w  cl1_COLOR00_low1-cl1_COLOR00_high1(a0),cl1_COLOR00_low1-cl1_COLOR00_high1(a1) ;Low-Bits COLORxx
  addq.w  #4,a0
  addq.w  #4,a1
  IFGT pf1_colors_number-32
    addq.b  #1*8,d0          ;Farbregister-Zähler erhöhen
    bne.s   cct_no_color_bank_restart ;Nein -> verzweige
    addq.w  #4,a0            ;BPLCON3 überspringen
    addq.w  #4,a1            ;BPLCON3 überspringen
cct_no_color_bank_restart
  ENDC
  dbf     d7,copy_color_table_loop
  rts

; ** Blind-Fader-In **
  CNOP 0,4
bfi_blind_fader_in
  move.l  a4,-(a7)
  tst.w   bfi_active(a3)    ;Blind-Fader-In an ?
  bne.s   bfi_no_blind_fader_in ;Wenn FALSE -> verzweige
  lea     bf_address_offsets_table(pc),a0 ;Tabelle mit Registeradressen
  ;move.l  cl2_construction1(a3),a1 ;1. CL
  ;ADDF.W  cl2_extension1_entry+cl2_ext1_BPL1DAT,a1
  move.l  cl2_construction2(a3),a2 ;2. CL
  ;ADDF.W  cl2_extension1_entry+cl2_ext1_BPL1DAT,a2
  move.l  cl2_display(a3),a4 ;3. CL
  ;ADDF.W  cl2_extension1_entry+cl2_ext1_BPL1DAT,a4
  move.w  bf_address_offsets_table_start(a3),d2 ;Registeradresse 
  MOVEF.W bf_table_length-1,d3
  move.w  d2,d0              
  MOVEF.W cl2_extension1_size,d4
  addq.w  #bf_speed,d0      ;Startwert der Tabelle erhöhen
  moveq   #bf_step2,d5
  cmp.w   #bf_table_length/2,d0 ;Ende der Tabelle erreicht ?
  ble.s   bfi_skip          ;Nein -> verzweige
  not.w   bfi_active(a3)    ;Blind-Fader-In aus
bfi_skip
  moveq   #bf_lamellas_number-1,d7 ;Anzahl der Lamellen
  move.w  d0,bf_address_offsets_table_start(a3) 
bfi_loop1
  move.w  d2,d1              ;Startwert 
  moveq   #bf_lamella_height-1,d6 ;Höhe der Lamelle
bfi_loop2
  move.w  (a0,d1.w*2),d0     ;Registeradresse aus Tabelle 
  addq.w  #bf_step1,d1      ;nächster Wert aus Tabelle
  ;move.w  d0,(a1)            ;Adresse in 1. CL schreiben
  and.w   d3,d1              ;Überlauf entfernen
  move.w  d0,(a2)            ;Adresse in 2. CL schreiben
  add.l   d4,a1              ;nächste Zeile in 1. CL
  move.w  d0,(a4)            ;Adresse in 3. CL schreiben
  add.l   d4,a2              ;nächste Zeile in 2. CL
  add.l   d4,a4              ;nächste Zeile in 3. CL
  dbf     d6,bfi_loop2
  add.w   d5,d2              ;Startwert erhöhen
  and.w   d3,d2              ;Überlauf entfernen
  dbf     d7,bfi_loop1
bfi_no_blind_fader_in
  move.l  (a7)+,a4
  rts

; ** Blind-Fader-Out **
  CNOP 0,4
bfo_blind_fader_out
  move.l  a4,-(a7)
  tst.w   bfo_active(a3)    ;Blind-Fader-Out an ?
  bne.s   bfo_no_blind_fader_out ;FALSE -> verzweige
  lea     bf_address_offsets_table(pc),a0 ;Tabelle mit Registeradressen
  ;move.l  cl2_construction1(a3),a1 ;1. CL
  ;ADDF.W  cl2_extension1_entry+cl2_ext1_BPL1DAT,a1
  move.l  cl2_construction2(a3),a2 ;2. CL
  ;ADDF.W  cl2_extension1_entry+cl2_ext1_BPL1DAT,a2
  move.l  cl2_display(a3),a4 ;3. CL
  ;ADDF.W  cl2_extension1_entry+cl2_ext1_BPL1DAT,a4
  move.w  bf_address_offsets_table_start(a3),d2 ;Startwert der Tabelle 
  MOVEF.W bf_table_length-1,d3
  move.w  d2,d0              
  MOVEF.W cl2_extension1_size,d4
  subq.w  #bf_speed,d0      ;Startwert der Tabelle verringern
  bpl.s   bfo_skip          ;Wenn positiv -> verzweige
  not.w   bfo_active(a3)    ;Blind-Fader-Out aus
bfo_skip
  moveq   #bf_step2,d5
  move.w  d0,bf_address_offsets_table_start(a3) 
  moveq   #bf_lamellas_number-1,d7 ;Anzahl der Lamellen
bfo_loop1
  move.w  d2,d1              ;Startwert 
  moveq   #bf_lamella_height-1,d6 ;Höhe der Lamelle
bfo_loop2
  move.w  (a0,d1.w*2),d0     ;Registeradresse aus Tabelle 
  addq.w  #bf_step1,d1      ;nächster Wert aus Tabelle
;  move.w  d0,(a1)            ;Adresse in 1. CL schreiben
  and.w   d3,d1              ;Überlauf entfernen
  move.w  d0,(a2)            ;Adresse in 2. CL schreiben
  add.l   d4,a1              ;nächste Zeile in 1. CL
  move.w  d0,(a4)            ;Adresse in 3. CL schreiben
  add.l   d4,a2              ;nächste Zeile in 2. CL
  add.l   d4,a4              ;nächste Zeile in 3. CL
  dbf     d6,bfo_loop2
  add.w   d5,d2              ;Startwert erhöhen
  and.w   d3,d2              ;Überlauf entfernen
  dbf     d7,bfo_loop1
bfo_no_blind_fader_out
  move.l  (a7)+,a4
  rts

  CNOP 0,4
cube_zoomer_in
  tst.w   czi_active(a3)
  bne.s   no_cube_zoomer_in
  lea     sine_table(pc),a0
  move.w  czi_zoom_angle(a3),d1
  moveq   #0,d0
  move.w  2(a0,d1.w*4),d0
  add.w   #czi_zoom_centre,d0
  move.l  d0,bv_zoom_distance(a3)
  addq.w  #czi_zoom_angle_speed,d1
  cmp.w   #sine_table_length/4,d1
  bge.s   czi_finished
  move.w  d1,czi_zoom_angle(a3)
  rts
  CNOP 0,4
czi_finished
  not.w   czi_active(a3)
no_cube_zoomer_in
  rts

  CNOP 0,4
cube_zoomer_out
  tst.w   czo_active(a3)
  bne.s   no_cube_zoomer_out
  lea     sine_table(pc),a0
  move.w  czo_zoom_angle(a3),d1
  moveq   #0,d0
  move.w  2(a0,d1.w*4),d0
  add.w   #czo_zoom_centre,d0
  move.l  d0,bv_zoom_distance(a3)
  addq.w  #czo_zoom_angle_speed,d1
  cmp.w   #sine_table_length/2,d1
  bge.s   czo_finished
  move.w  d1,czo_zoom_angle(a3)
  rts
  CNOP 0,4
czo_finished
  not.w   czo_active(a3)
no_cube_zoomer_out
  rts


; ## Interrupt-Routinen ##
  

  INCLUDE "int-autovectors-handlers.i"

  IFEQ pt_ciatiming_enabled
; ** CIA-B timer A interrupt server **
  CNOP 0,4
ciab_ta_int_server
  ENDC

  IFNE pt_ciatiming_enabled
; ** Vertical blank interrupt server **
  CNOP 0,4
VERTB_int_server
  ENDC

  IFEQ pt_music_fader_enabled
    bsr.s   pt_fade_out_music
    bra.s   pt_PlayMusic

; ** Musik ausblenden **
  PT_FADE_OUT

  ENDC

; ** PT-replay routine **
  IFEQ pt_music_fader_enabled
    CNOP 0,4
  ENDC
  IFD pt_v2.3a
    PT2_REPLAY
  ENDC
  IFD pt_v3.0b
    PT3_REPLAY pt_effects_handler
  ENDC

  CNOP 0,4
pt_effects_handler
  move.b  n_cmdlo(a2),d0 ;Get command data x = Effekt y = TRUE/FALSE
  cmp.b   #$10,d0
  beq.s   pt_horiz_scrolltext_on
  cmp.b   #$11,d0
  beq.s   pt_horiz_scrolltext_off
  cmp.b   #$20,d0
  beq.s   pt_fade_in_image_on
  cmp.b   #$30,d0
  beq     pt_fade_out_image_on
  cmp.b   #$40,d0
  beq     pt_fade_in_chunky_rotation_zoomer_on
  cmp.b   #$50,d0
  beq     pt_cube_zoomer_in_on
  cmp.b   #$60,d0
  beq     pt_cube_zoomer_out_on
  cmp.b   #$70,d0
  beq     pt_zoomer_on
  cmp.b   #$71,d0
  beq     pt_zoomer_off
  cmp.b   #$d0,d0
  beq     pt_normal_letters_on
  cmp.b   #$d1,d0
  beq     pt_normal_letters_off
  cmp.b   #$e0,d0
  beq     pt_sine_letters_on
  cmp.b   #$e1,d0
  beq     pt_sine_letters_off
  cmp.b   #$f0,d0
  beq     pt_wave_letters_on
  cmp.b   #$f1,d0
  beq     pt_wave_letters_off
  rts
  CNOP 0,4
pt_horiz_scrolltext_on
  clr.w   wst_active(a3)     ;Wave-Scrolltext an
  rts
  CNOP 0,4
pt_horiz_scrolltext_off
  not.w   wst_active(a3)     ;Wave-Scrolltext aus
  rts
  CNOP 0,4
pt_fade_in_image_on
  move.l  a0,-(a7)
  move.l  cl1_construction2(a3),a0 ;CL
  move.w  #bplcon0_bits2,cl1_BPLCON0+2(a0)
  move.l  cl1_display(a3),a0 ;CL
  move.w  #bplcon0_bits2,cl1_BPLCON0+2(a0)
  move.l  (a7)+,a0
  clr.w   ifi_active(a3)     ;Image-Fader-In an
  rts
  CNOP 0,4
pt_fade_out_image_on
  clr.w   ifo_active(a3)     ;Image-Fader-Out an
  rts
  CNOP 0,4
pt_fade_in_chunky_rotation_zoomer_on
  movem.l d0-d7/a0-a6,-(a7)
  bsr.s   crz_init_color_registers
  movem.l (a7)+,d0-d7/a0-a6
  move.l  a0,-(a7)
  move.l  cl1_construction2(a3),a0 ;CL
  move.w  #bplcon0_bits,cl1_BPLCON0+2(a0)
  move.l  cl1_display(a3),a0 ;CL
  move.w  #bplcon0_bits,cl1_BPLCON0+2(a0)
  move.l  (a7)+,a0
  clr.w   crz_active(a3)     ;Chunky-Rotation-Zoomer an
  clr.w   bfi_active(a3)     ;Blind-Fader-In an
  rts
  CNOP 0,4
pt_cube_zoomer_in_on
  clr.w  bv_active(a3)       ;Cube an
  clr.w  czi_active(a3)      ;Cube-Zoomer-In an
  rts
  CNOP 0,4
pt_cube_zoomer_out_on
  clr.w  czo_active(a3)      ;Cube-Zoomer-Out an
  rts
  CNOP 0,4
pt_zoomer_on
  clr.w  crz_zoomer_active(a3) ;Zoomer an
  rts
  CNOP 0,4
pt_zoomer_off
  not.w  crz_zoomer_active(a3) ;Zoomer aus
  rts
  CNOP 0,4
pt_normal_letters_on
  rts
  CNOP 0,4
pt_normal_letters_off
  rts
  CNOP 0,4
pt_sine_letters_on
  rts
  CNOP 0,4
pt_sine_letters_off
  rts
  CNOP 0,4
pt_wave_letters_on
  rts
  CNOP 0,4
pt_wave_letters_off
  rts

  CNOP 0,4
crz_init_color_registers
  lea     pf1_color_table+(bg_image_colors_number*4),a0
  move.l  cl1_construction2(a3),a1 ;CL
  ADDF.W  cl1_COLOR00_high1+2,a1 ;Istwerte
  move.l  cl1_display(a3),a2 ;CL
  ADDF.W  cl1_COLOR00_high1+2,a2 ;Istwerte
  move.w  #$f0f,d3
  IFGT pf1_colors_number-32
    moveq   #TRUE,d4         ;Farbregisterzähler
  ENDC
  MOVEF.W pf1_colors_number-1,d7 ;Anzahl der Farben
crz_init_color_registers_loop
  move.l  (a0)+,d0
  move.l  d0,d1
  RGB8_TO_RGB4_HIGH d0,d2,d3
  move.w  d0,(a1)            ;High-Bits COLORxx
  move.w  d0,(a2)            ;High-Bits COLORxx
  RGB8_TO_RGB4_LOW d1,d2,d3
  move.w  d2,cl1_COLOR00_low1-cl1_COLOR00_high1(a1) ;Low-Bits COLORxx
  move.w  d2,cl1_COLOR00_low1-cl1_COLOR00_high1(a2) ;Low-Bits COLORxx
  addq.w  #4,a1
  addq.w  #4,a2
  IFGT pf1_colors_number-32
    addq.b  #1*8,d4          ;Farbregister-Zähler erhöhen
    bne.s   if_no_color_bank_restart ;Nein -> verzweige
    addq.w  #4,a1            ;BPLCON3 überspringen
    addq.w  #4,a2            ;BPLCON3 überspringen
if_no_color_bank_restart
  ENDC
  dbf     d7,crz_init_color_registers_loop
  rts

; ** CIA-B Timer B interrupt server **
  CNOP 0,4
ciab_tb_int_server
  PT_TIMER_INTERRUPT_SERVER

; ** Level-6-Interrupt-Server **
  CNOP 0,4
EXTER_int_server
  rts

; ** Level-7-Interrupt-Server **
  CNOP 0,4
NMI_int_server
  rts


; ## Hilfsroutinen ##
  INCLUDE "help-routines.i"


; ## Speicherstellen für Tabellen und Strukturen ##
  INCLUDE "sys-structures.i"

; ** Farben des ersten Playfields **
  CNOP 0,4
pf1_color_table
  REPT bg_image_colors_number
    DC.L color00_bits
  ENDR
  INCLUDE "Daten:Asm-Sources.AGA/old'scool-intro/colourtables/256x256x128-Tunnel.ct"

; ** Farben der Sprites **
spr_color_table
  DC.L $000000,$fffffe,$8b888b,$373735
  DC.L $000000,$fffffe,$8b888b,$373735
  DC.L $000000,$fffffe,$8b888b,$373735
  REPT 4
    DC.L $000000
  ENDR

; ** Adressen der Sprites **
spr_pointers_construction
  DS.L spr_number

spr_pointers_display
  DS.L spr_number

; ** Sinus / Cosinustabelle **
  CNOP 0,2
sine_table
  INCLUDE "sine-table-512x32.i"

; ** Tables for effect commands **
; ** "Invert Loop" **
  INCLUDE "music-tracker/pt-invert-table.i"

; ** "Vibrato/Tremolo" **
  INCLUDE "music-tracker/pt-vibrato-tremolo-table.i"

; ** "Arpeggio/Tone Portamento" **
  IFD pt_v2.3a
    INCLUDE "music-tracker/pt2-period-table.i"
  ENDC
  IFD pt_v3.0b
    INCLUDE "music-tracker/pt3-period-table.i"
  ENDC

; ** Temporary channel structures **
  INCLUDE "music-tracker/pt-temp-channel-data-tables.i"

; ** Pointers to samples **
  INCLUDE "music-tracker/pt-sample-starts-table.i"

; ** Pointers to priod tables for different tuning **
  INCLUDE "music-tracker/pt-finetune-starts-table.i"

; **** Wave-Scrolltext ****
; ** ASCII-Buchstaben **
wst_ascii
  DC.B "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789.!?-'():\/*# "
wst_ascii_end
  EVEN

; ** Offsets der einzelnen Chars **
  CNOP 0,2
wst_characters_offsets
  DS.W wst_ascii_end-wst_ascii
  
; ** X-Koordinaten der einzelnen Chars der Laufschrift **
wst_characters_x_positions
  DS.W wst_text_characters_number

; **** Blenk-Vectors ****
; ** Farbtabelle für Shading **
  CNOP 0,4
bv_color_table
; ** Grau **
  DC.L $000e1012,$00101215,$00121518,$0015181b
  DC.L $00171a1e,$001a1d21,$001c2024,$001f2327
  DC.L $0021252a,$0024282d,$00272b30,$002a2e34
  DC.L $002d3137,$002f343a,$0032373d,$00353a40
  DC.L $00373c43,$003a3f46,$003d4249,$0040454c
  DC.L $0042484f,$00454a52,$00484d55,$004b5058
  DC.L $004e535b,$0051565e,$00535961,$00565c64
  DC.L $00595e67,$005c626a,$005f656d,$00626870
  DC.L $00666b74,$00696e77,$006c717a,$006f747d
  DC.L $00737880,$00767b82,$00787d85,$007c8088
  DC.L $007f828b,$0081868e,$00858991,$00878b94
  DC.L $008b8f97,$008e929a,$0091959d,$009599a0
  DC.L $00989ca3,$009b9ea6,$009fa2a9,$00a2a5ac
  DC.L $00a6a8af,$00aaadb3,$00aeb0b6,$00b1b3b9
  DC.L $00b4b6bc,$00b8babf,$00bbbec2,$00bfc1c5
  DC.L $00c3c4c8,$00c6c7cb,$00c9cbce,$00cdced1

; ** Objektdaten **
  CNOP 0,2
bv_3d_object
  DC.W -(35*8),-(35*8),-(35*8) ;P0 Würfel
  DC.W 35*8,-(35*8),-(35*8)  ;P1
  DC.W 35*8,35*8,-(35*8)     ;P2
  DC.W -(35*8),35*8,-(35*8)  ;P3
  DC.W -(35*8),-(35*8),35*8  ;P4
  DC.W 35*8,-(35*8),35*8     ;P5
  DC.W 35*8,35*8,35*8        ;P6
  DC.W -(35*8),35*8,35*8     ;P7
  
; ** Information über Objekt **
  CNOP 0,4
bv_object1_info_table
; ** 1. Fläche **
  DC.L 0                     ;Zeiger auf Koords
  DC.W bv_object1_face1_color ;Farbe der Fläche
  DC.W bv_object1_face1_lines_number-1 ;Anzahl der Linien

; ** 2. Fläche **
  DC.L 0                     ;Zeiger auf Koords
  DC.W bv_object1_face2_color ;Farbe der Fläche
  DC.W bv_object1_face2_lines_number-1 ;Anzahl der Linien

; ** 3. Fläche **
  DC.L 0                     ;Zeiger auf Koords
  DC.W bv_object1_face3_color ;Farbe der Fläche
  DC.W bv_object1_face3_lines_number-1 ;Anzahl der Linien

; ** 4. Fläche **
  DC.L 0                     ;Zeiger auf Koords
  DC.W bv_object1_face4_color ;Farbe der Fläche
  DC.W bv_object1_face4_lines_number-1 ;Anzahl der Linien

; ** 5. Fläche **
  DC.L 0                     ;Zeiger auf Koords
  DC.W bv_object1_face5_color ;Farbe der Fläche
  DC.W bv_object1_face5_lines_number-1 ;Anzahl der Linien

; ** 6. Fläche **
  DC.L 0                     ;Zeiger auf Koords
  DC.W bv_object1_face6_color ;Farbe der Fläche
  DC.W bv_object1_face6_lines_number-1 ;Anzahl der Linien
  
; ** Eckpunkte der Flächen **
  CNOP 0,2
bv_object1_edge_table
  DC.W 0*3,1*3,2*3,3*3,0*3   ;Fläche vorne
  DC.W 5*3,4*3,7*3,6*3,5*3   ;Fläche hinten
  DC.W 4*3,0*3,3*3,7*3,4*3   ;Fläche links
  DC.W 1*3,5*3,6*3,2*3,1*3   ;Fläche rechts
  DC.W 4*3,5*3,1*3,0*3,4*3   ;Fläche oben
  DC.W 3*3,2*3,6*3,7*3,3*3   ;Fläche unten

; ** Koordinaten der Linien **
bv_xyz_rotation_coordinates
  DS.W bv_object1_edge_points_number*3

; **** Image-Fader ****
; ** Zielfarbwerte für 24-Bit-Fader-In **
  CNOP 0,4
ifi_color_table
  INCLUDE "Daten:Asm-Sources.AGA/old'scool-intro/colourtables/320x57x16-Title.ct"

; ** Zielfarbwerte für 24-Bit-Fader-Out **
ifo_color_table
  REPT bg_image_colors_number
    DC.L color00_bits
  ENDR

; ** Puffer für 24-Bit-Image-Fader Farbwerte **
if_color_cache
  REPT bg_image_colors_number
    DC.L color00_bits
  ENDR

; ** Tabelle mit Registeradressen **
bf_address_offsets_table
  REPT bf_table_length/2
    DC.W NOOP
  ENDR
  REPT bf_table_length/2
    DC.W BPL1DAT
  ENDR


; ## Speicherstellen allgemein ##
  INCLUDE "sys-variables.i"


; ## Speicherstellen für Namen ##
  INCLUDE "sys-names.i"


; ## Speicherstellen für Texte ##
  INCLUDE "error-texts.i"

; **** Wave-Scrolltext ****
; ** Text für Laufschrift **
wst_text
  DC.B "°¹RESISTANCE"
  REPT wst_text_characters_number/(wst_origin_character_x_size/wst_text_character_x_size)
    DC.B " "
  ENDR
  DC.B "PRESENTS"
  REPT wst_text_characters_number/(wst_origin_character_x_size/wst_text_character_x_size)
    DC.B " "
  ENDR
  DC.B ""
  DC.B "
¹³YES WE ARE BACK !!!"
  REPT wst_text_characters_number/(wst_origin_character_x_size/wst_text_character_x_size)
    DC.B " "
  ENDR
  DC.B "PRESS F1-F10 TO ENJOY DIFFERENT RUBBER-CUBE MOVEMENTS... "
  REPT wst_text_characters_number/(wst_origin_character_x_size/wst_text_character_x_size)
    DC.B " "
  ENDR
  DC.B ""
  DC.B "²³"
  DC.B "APPENDIX  "
  DC.B "ELUDE  "
  DC.B "DARKLITE  "
  DC.B "DESIRE  "
  DC.B "DEFENCE FORCE  "
  DC.B "DEKADENCE  "
  DC.B "FOCUS DESIGN  "
  DC.B "GHOSTOWN  "
  DC.B "LEMON  "
  DC.B "LOONIES  "
  DC.B "MOODS PLATEAU  "
  DC.B "GENESIS PROJECT  "
  DC.B "SCARAB  "
  DC.B "SCOOPEX  "
;  DC.B "WANTED TEAM  "
;  DC.B "Y CREW"
  REPT wst_text_characters_number/(wst_origin_character_x_size/wst_text_character_x_size)
    DC.B " "
  ENDR
  DC.B "
¹³THE CREDITS     "
  DC.B "CODING - DISSIDENT  "
  DC.B "GRAPHICS - DISSIDENT  "
  DC.B "MUSIC - DISSIDENT  "
  REPT wst_text_characters_number/(wst_origin_character_x_size/wst_text_character_x_size)
    DC.B " "
  ENDR
  REPT wst_text_characters_number/(wst_origin_character_x_size/wst_text_character_x_size)
    DC.B " "
  ENDR
  DC.B ""
  DC.B "INTRO RESTART"
  REPT wst_text_characters_number/(wst_origin_character_x_size/wst_text_character_x_size)
    DC.B " "
  ENDR
  DC.B ""
  DC.B FALSE
  EVEN

; **** Chunky-Rotation-Zoomer ****
; ** Tabelle mit Switchwerten des Playfieldes **
crz_switch_table
  DS.B crz_image_x_size*crz_image_y_size

program_version DC.B "$VER: old'scool-intro 1.0 beta (10.7.23)",0
  EVEN


; ## Audiodaten nachladen ##

; **** PT-Replay ****
  IFNE pt_split_module_enabled
pt_auddata SECTION audio,DATA_C
    INCBIN "Daten:Asm-Sources.AGA/old'scool-intro/module/mod.ClassicTune14remix"
  ELSE
pt_auddata SECTION audio,DATA
    INCBIN "Daten:Asm-Sources.AGA/old'scool-intro/module/MOD.ClassicTune14Remix.song"

pt_audsmps SECTION audio2,DATA_C
    INCBIN "Daten:Asm-Sources.AGA/old'scool-intro/module/MOD.ClassicTune14Remix.smps"
  ENDC


; ## Grafikdaten nachladen ##

; **** Chunky-Rotation-Zoomer ****
crz_image_data SECTION crz_gfx,DATA
  INCBIN "Daten:Asm-Sources.AGA/old'scool-intro/graphics/256x256x128-Tunnel.rawblit"

; **** Wave-Scrolltext ****
wst_image_data SECTION wst_gfx,DATA
  INCBIN "Daten:Asm-Sources.AGA/old'scool-intro/graphics/64x56x4-Antialiased-Font.rawblit"

; **** Background-Image ****
bg_image_data SECTION bg_gfx,DATA
  INCBIN "Daten:Asm-Sources.AGA/old'scool-intro/graphics/320x57x16-Title.rawblit"
  END
